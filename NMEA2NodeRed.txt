[
    {
        "id": "c4bfeb15a0b5facf",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "a3bd807ce6f6d210",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "6e623056.799cd",
        "type": "server",
        "name": "Home Assistant",
        "addon": true
    },
    {
        "id": "b0652885.6c6d8",
        "type": "ui_group",
        "name": "Navigation Data",
        "tab": "6bc1a2cf.70709c",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": true
    },
    {
        "id": "596dfba5.8c720c",
        "type": "ui_group",
        "name": "Compass",
        "tab": "6bc1a2cf.70709c",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": true
    },
    {
        "id": "e9660793.9419",
        "type": "ui_group",
        "name": "Routing Data",
        "tab": "5f14a6c8.fe72a",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": true
    },
    {
        "id": "604ac05d.2accd8",
        "type": "ui_group",
        "name": "Satellite Data",
        "tab": "d15da7d4.0fb23",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": true
    },
    {
        "id": "2e992207.609d26",
        "type": "ui_group",
        "name": "RMB",
        "tab": "5f14a6c8.fe72a",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": true
    },
    {
        "id": "40a6636b.25d694",
        "type": "ui_group",
        "name": "Transducer Data",
        "tab": "d15da7d4.0fb23",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": true
    },
    {
        "id": "f0a8cf1.e62c73",
        "type": "ui_group",
        "name": "Depths",
        "tab": "6bc1a2cf.70709c",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "1bfc320.838e14e",
        "type": "ui_group",
        "name": "Trip",
        "tab": "5f14a6c8.fe72a",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "7db9a1f8.c9b498",
        "type": "ui_group",
        "name": "not in use",
        "tab": "d15da7d4.0fb23",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "ee835044.b7fcc",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "8c813a19.b99e88",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "6bc1a2cf.70709c",
        "type": "ui_tab",
        "name": "Basic Data",
        "icon": "dashboard",
        "order": 2
    },
    {
        "id": "5f14a6c8.fe72a",
        "type": "ui_tab",
        "name": "Routing Data",
        "icon": "dashboard",
        "order": 3
    },
    {
        "id": "d15da7d4.0fb23",
        "type": "ui_tab",
        "name": "Other stuff",
        "icon": "dashboard",
        "order": 4
    },
    {
        "id": "8c813a19.b99e88",
        "type": "ui_tab",
        "name": "Routing",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "66bd7f6aa7de93fd",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "36538c2b4ee8c5bc",
        "type": "ha-entity-config",
        "server": "6e623056.799cd",
        "deviceConfig": "ef03169a9feb3396",
        "name": "SOG",
        "version": "6",
        "entityType": "sensor",
        "haConfig": [
            {
                "property": "name",
                "value": "SOG"
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": "speed"
            },
            {
                "property": "unit_of_measurement",
                "value": "kn"
            },
            {
                "property": "state_class",
                "value": "measurement"
            }
        ],
        "resend": false,
        "debugEnabled": false
    },
    {
        "id": "ef03169a9feb3396",
        "type": "ha-device-config",
        "name": "SOG",
        "hwVersion": "",
        "manufacturer": "Node-RED",
        "model": "",
        "swVersion": ""
    },
    {
        "id": "44862df9b98c4b6d",
        "type": "ha-device-config",
        "name": "COG",
        "hwVersion": "",
        "manufacturer": "Node-RED",
        "model": "",
        "swVersion": ""
    },
    {
        "id": "c4760c4026b9fbb6",
        "type": "ha-entity-config",
        "server": "6e623056.799cd",
        "deviceConfig": "44862df9b98c4b6d",
        "name": "COG",
        "version": "6",
        "entityType": "sensor",
        "haConfig": [
            {
                "property": "name",
                "value": "COG"
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": ""
            },
            {
                "property": "unit_of_measurement",
                "value": ""
            },
            {
                "property": "state_class",
                "value": ""
            }
        ],
        "resend": false,
        "debugEnabled": false
    },
    {
        "id": "6c3483cb057e76a5",
        "type": "ha-entity-config",
        "server": "6e623056.799cd",
        "deviceConfig": "183ff56b1345f079",
        "name": "",
        "version": "6",
        "entityType": "sensor",
        "haConfig": [
            {
                "property": "name",
                "value": "Depth"
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": ""
            },
            {
                "property": "unit_of_measurement",
                "value": ""
            },
            {
                "property": "state_class",
                "value": ""
            }
        ],
        "resend": false,
        "debugEnabled": false
    },
    {
        "id": "df0293e6aff8a15b",
        "type": "ha-device-config",
        "name": "LAT",
        "hwVersion": "",
        "manufacturer": "Node-RED",
        "model": "",
        "swVersion": ""
    },
    {
        "id": "172c54578c852f2d",
        "type": "ha-entity-config",
        "server": "6e623056.799cd",
        "deviceConfig": "df0293e6aff8a15b",
        "name": "LAT",
        "version": "6",
        "entityType": "sensor",
        "haConfig": [
            {
                "property": "name",
                "value": "LAT"
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": ""
            },
            {
                "property": "unit_of_measurement",
                "value": ""
            },
            {
                "property": "state_class",
                "value": ""
            }
        ],
        "resend": false,
        "debugEnabled": false
    },
    {
        "id": "50ae81c58f38d00d",
        "type": "ha-device-config",
        "name": "LON",
        "hwVersion": "",
        "manufacturer": "Node-RED",
        "model": "",
        "swVersion": ""
    },
    {
        "id": "2482184f4ad2eb67",
        "type": "ha-entity-config",
        "server": "6e623056.799cd",
        "deviceConfig": "50ae81c58f38d00d",
        "name": "LON",
        "version": "6",
        "entityType": "sensor",
        "haConfig": [
            {
                "property": "name",
                "value": "LON"
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": ""
            },
            {
                "property": "unit_of_measurement",
                "value": ""
            },
            {
                "property": "state_class",
                "value": ""
            }
        ],
        "resend": false,
        "debugEnabled": false
    },
    {
        "id": "968e37475906c731",
        "type": "ha-device-config",
        "name": "AWS",
        "hwVersion": "",
        "manufacturer": "Node-RED",
        "model": "",
        "swVersion": ""
    },
    {
        "id": "6e585bd0f435ce58",
        "type": "ha-device-config",
        "name": "GPSTime",
        "hwVersion": "",
        "manufacturer": "Node-RED",
        "model": "",
        "swVersion": ""
    },
    {
        "id": "95237685892bad5f",
        "type": "ha-entity-config",
        "server": "6e623056.799cd",
        "deviceConfig": "6e585bd0f435ce58",
        "name": "GPSTime",
        "version": "6",
        "entityType": "sensor",
        "haConfig": [
            {
                "property": "name",
                "value": "GPSTime"
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": "date"
            },
            {
                "property": "unit_of_measurement",
                "value": ""
            },
            {
                "property": "state_class",
                "value": "measurement"
            }
        ],
        "resend": false,
        "debugEnabled": false
    },
    {
        "id": "c28e18225a3bbea0",
        "type": "ha-device-config",
        "name": "GPSQuality",
        "hwVersion": "",
        "manufacturer": "Node-RED",
        "model": "",
        "swVersion": ""
    },
    {
        "id": "f7e733d2f1e66d00",
        "type": "ha-entity-config",
        "server": "6e623056.799cd",
        "deviceConfig": "c28e18225a3bbea0",
        "name": "GPSQuality",
        "version": "6",
        "entityType": "sensor",
        "haConfig": [
            {
                "property": "name",
                "value": "GPSQuality"
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": ""
            },
            {
                "property": "unit_of_measurement",
                "value": ""
            },
            {
                "property": "state_class",
                "value": ""
            }
        ],
        "resend": false,
        "debugEnabled": false
    },
    {
        "id": "7509242e53c495d5",
        "type": "ha-device-config",
        "name": "GPSSatellites",
        "hwVersion": "",
        "manufacturer": "Node-RED",
        "model": "",
        "swVersion": ""
    },
    {
        "id": "7d1bd98111c9f44c",
        "type": "ha-entity-config",
        "server": "6e623056.799cd",
        "deviceConfig": "7509242e53c495d5",
        "name": "GPSSatellites",
        "version": "6",
        "entityType": "sensor",
        "haConfig": [
            {
                "property": "name",
                "value": "GPSSatellites"
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": ""
            },
            {
                "property": "unit_of_measurement",
                "value": ""
            },
            {
                "property": "state_class",
                "value": ""
            }
        ],
        "resend": false,
        "debugEnabled": false
    },
    {
        "id": "e4b0b6af05f6764b",
        "type": "ha-device-config",
        "name": "AWA",
        "hwVersion": "",
        "manufacturer": "Node-RED",
        "model": "",
        "swVersion": ""
    },
    {
        "id": "6eae8aaf035d4363",
        "type": "ha-entity-config",
        "server": "6e623056.799cd",
        "deviceConfig": "e4b0b6af05f6764b",
        "name": "AWA",
        "version": "6",
        "entityType": "sensor",
        "haConfig": [
            {
                "property": "name",
                "value": "AWA"
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": ""
            },
            {
                "property": "unit_of_measurement",
                "value": ""
            },
            {
                "property": "state_class",
                "value": ""
            }
        ],
        "resend": false,
        "debugEnabled": false
    },
    {
        "id": "d2eadfdb1b7ff54b",
        "type": "ha-device-config",
        "name": "AWS",
        "hwVersion": "",
        "manufacturer": "Node-RED",
        "model": "",
        "swVersion": ""
    },
    {
        "id": "97b112372f52f973",
        "type": "ha-entity-config",
        "server": "6e623056.799cd",
        "deviceConfig": "d2eadfdb1b7ff54b",
        "name": "AWS",
        "version": "6",
        "entityType": "sensor",
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": "speed"
            },
            {
                "property": "unit_of_measurement",
                "value": "kn"
            },
            {
                "property": "state_class",
                "value": "measurement"
            }
        ],
        "resend": false,
        "debugEnabled": false
    },
    {
        "id": "183ff56b1345f079",
        "type": "ha-device-config",
        "name": "Depth",
        "hwVersion": "",
        "manufacturer": "NMEA",
        "model": "",
        "swVersion": ""
    },
    {
        "id": "116cf96ee16cb2e3",
        "type": "ha-entity-config",
        "server": "6e623056.799cd",
        "deviceConfig": "183ff56b1345f079",
        "name": "Depth",
        "version": "6",
        "entityType": "sensor",
        "haConfig": [
            {
                "property": "name",
                "value": "Depth"
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": "distance"
            },
            {
                "property": "unit_of_measurement",
                "value": "ft"
            },
            {
                "property": "state_class",
                "value": "measurement"
            }
        ],
        "resend": false,
        "debugEnabled": false
    },
    {
        "id": "52228ddc.131534",
        "type": "function",
        "z": "c4bfeb15a0b5facf",
        "name": "NMEA: main filter",
        "func": "/* \n   Filter NMEA sentences. Known sentences:\n   $GPAAM, $GPAPB, $GPBOD, $GPGGA, $GPGLC, $GPGLL, \n   $GPGSA, $GPGSV, $GPRMB, $GPRMC, $GPVTG, $GPXTE, \n   $GPZDA, $IIXDR, $SDDBT, $SDDPT, $SDHDG, $SDMTW, \n   $SDVHW, $SDVLW, $WIMWD, $WIMWV\n   \n   Function: Since the checksum field isn't separated by comma, do that first. (replace '*' by ',@')\n   The switch command is used to control the NMEA sentence forwarding.\n   Since IIXDR has variable length is must be treated separately. Therefore there are two node outputs.\n*/\n\n\"use strict\"\n\nvar Nmea_Id = '';\n\n// The last field is separated by an asterix. Replace it by a comma to let work string.split() properly.\n\nmsg.Satz = msg.payload.replace(\"*\", \",@\");\n\n//msg.Satz = msg.Satz.split(/\\n/);\nmsg.Satz = msg.Satz.split(\",\");\n\nNmea_Id = msg.Satz[0];\n\nmsg.Nmea_Id = Nmea_Id;\n\nswitch (Nmea_Id) {\n    case '$GPAAM': return [msg, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, msg];\n\n    case '$GPAPB': return [null, msg, null, null, null,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, msg];\n\n    case '$GPBOD': return [null, null, msg, null, null,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, msg];\n\n    case '$GPGGA': return [null, null, null, msg, null,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, msg];\n\n    case '$GPGLC': return [null, null, null, null, msg,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, msg];\n\n    case '$GPGLL': return [null, null, null, null, null,\n        msg, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, msg];\n\n    case '$GPGSA': return [null, null, null, null, null,\n        null, msg, null, null, null,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, msg];\n\n    case '$GPGSV': return [null, null, null, null, null,\n        null, null, msg, null, null,\n        null, null, null, null, null,\n        null, null, null, msg];\n\n    case '$GPRMB': return [null, null, null, null, null,\n        null, null, null, msg, null,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, msg];\n\n    case '$GPRMC': return [null, null, null, null, null,\n        null, null, null, null, msg,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, msg];\n\n    case '$GPVTG': return [null, null, null, null, null,\n        null, null, null, null, null,\n        msg, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, msg];\n\n    case '$GPXTE': return [null, null, null, null, null,\n        null, null, null, null, null,\n        null, msg, null, null, null,\n        null, null, null, null, null,\n        null, null, null, msg];\n\n    case '$GPZDA': return [null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, msg, null, null,\n        null, null, null, null, null,\n        null, null, null, msg];\n\n    case '$IIXDR': return [null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, msg, null,\n        null, null, null, null, null,\n        null, null, null, msg];\n\n    case '$SDDBT': return [null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, null, msg,\n        null, null, null, null, null,\n        null, null, null, msg];\n\n    case '$SDDPT': return [null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        msg, null, null, null, null,\n        null, null, null, msg];\n\n    case '$SDHDG': return [null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        null, msg, null, null, null,\n        null, null, null, msg];\n\n    case '$SDMTW': return [null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, msg, null, null,\n        null, null, null];\n\n    case '$SDVHW': return [null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, msg, null,\n        null, null, null, msg];\n\n    case '$SDVLW': return [null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, null, msg,\n        null, null, null, msg];\n\n    case '$WIMWD': return [null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        msg, null, null, msg];\n\n    case '$WIMWV': return [null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        null, msg, null, msg];\n\n    case '$IIVWR': return [null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, msg, msg];\n\n    case '$IIRPM': return null;\n\n    case '!AIVDO': return null;\n\n    default: return null;\n\n    /*    \n        [ null, null, null, null, null,\n                                null, null, null, null, null,\n                                null, null, null, null, null,\n                                null, null, null, null, null,\n                                null, msg];   \n     */\n\n}\n\n",
        "outputs": 23,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 620,
        "wires": [
            [],
            [
                "2e56675e.213948",
                "5253f12f.9c5218",
                "2d745c90.f289d4",
                "ebfbb77f.322348",
                "71056213.0948d4",
                "b0241d9e.b8787",
                "e9650e7c.b6d4e8",
                "72709359.a9442c"
            ],
            [],
            [
                "383c8f63.862828",
                "790afbd7.3654ec",
                "ea51a00a.bdc058",
                "2d9a8d4.ca16072",
                "280c7f71.9397d"
            ],
            [],
            [],
            [],
            [],
            [
                "d226219c.7afe7",
                "fe71afe3.a3853",
                "e10f8eca.77985",
                "6beb0a5.8ca2674",
                "518ee0be.1270a8",
                "9dd9f599.4fc9b",
                "c9f48ea5.bbc318",
                "c3a5f175.8c11e8",
                "c1cc9a22.1cbdb",
                "596a9de6.3d287c"
            ],
            [
                "73441ae9.b40a4c",
                "6bdcb3fd.49daa4",
                "6e89ec4b.4597bc",
                "3403daf.c2cb226"
            ],
            [
                "2130a8aa.64d14",
                "b6806f11.d449b8",
                "89cf9c1d.dd772"
            ],
            [],
            [],
            [
                "2d45a331.50e0ec"
            ],
            [
                "2a55966b.9a9ae2",
                "3f5e9d86.994432",
                "a24c1e8e.8ca888"
            ],
            [
                "3477d8db.5a6e48"
            ],
            [
                "bddd33ed.693d88"
            ],
            [
                "146651da.31421e"
            ],
            [
                "f57075d8.2c12c8"
            ],
            [
                "bb3c46cc.6266c"
            ],
            [],
            [],
            [
                "99ce38a14c770a8a",
                "fe312ce6da53ef24"
            ]
        ]
    },
    {
        "id": "343f79b.abaa206",
        "type": "ui_text",
        "z": "c4bfeb15a0b5facf",
        "group": "b0652885.6c6d8",
        "order": 0,
        "width": "0",
        "height": "0",
        "name": "LAT",
        "label": "LAT",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1419.999984741211,
        "y": 652.0000610351562,
        "wires": []
    },
    {
        "id": "c7396282.341eb8",
        "type": "ui_text",
        "z": "c4bfeb15a0b5facf",
        "group": "b0652885.6c6d8",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "LON",
        "label": "LON",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1419.999984741211,
        "y": 684.0000610351562,
        "wires": []
    },
    {
        "id": "73441ae9.b40a4c",
        "type": "function",
        "z": "c4bfeb15a0b5facf",
        "name": "convert+format LAT",
        "func": " //convert and format latitude\n \n        var value_in = msg.Satz[3];\n    \n        msg.payload = value_in.substr(0,2) + '°' + ' ' + value_in.substr(2,5) + \"' \" + msg.Satz[4];\n     \n        return [msg];\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 1234.999984741211,
        "y": 652.0000610351562,
        "wires": [
            [
                "343f79b.abaa206",
                "1b620e7aa964c035"
            ]
        ]
    },
    {
        "id": "6bdcb3fd.49daa4",
        "type": "function",
        "z": "c4bfeb15a0b5facf",
        "name": "convert+format LON",
        "func": "// convert and format longitude\n\n  var value_in = msg.Satz[5];\n        \n  msg.payload = value_in.substr(0,3) + '°' + ' ' + value_in.substr(3,5) + \"' \" + msg.Satz[6];\n  \n  return msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 1245.999984741211,
        "y": 684.0000610351562,
        "wires": [
            [
                "c7396282.341eb8",
                "11bcde88b3734685"
            ]
        ]
    },
    {
        "id": "6e89ec4b.4597bc",
        "type": "function",
        "z": "c4bfeb15a0b5facf",
        "name": "convert+format SOG",
        "func": "// convert and format Speed over ground\n\n  var value_in = msg.Satz[7];\n        \n  msg.payload = value_in; // + ' kn';\n  \n  return  msg;\n  \n        ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1245.999984741211,
        "y": 715.0000610351562,
        "wires": [
            [
                "4450ef39.b653e",
                "4d476aef0bb45ca9"
            ]
        ]
    },
    {
        "id": "3403daf.c2cb226",
        "type": "function",
        "z": "c4bfeb15a0b5facf",
        "name": "convert+format COG",
        "func": "// convert and format course over ground\n\n  var value_in = msg.Satz[8];\n        \n  msg.payload = value_in; //+ ' °';\n  \n  return  msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1244.999984741211,
        "y": 747.0000610351562,
        "wires": [
            [
                "fa638f24.5d0808",
                "d905719b18ed91bb"
            ]
        ]
    },
    {
        "id": "692fcbb1.b40c74",
        "type": "comment",
        "z": "c4bfeb15a0b5facf",
        "name": "$GPRMC",
        "info": "Recommended Minimum Navigation Information",
        "x": 676.9999847412109,
        "y": 631.0000610351562,
        "wires": []
    },
    {
        "id": "bddd33ed.693d88",
        "type": "function",
        "z": "c4bfeb15a0b5facf",
        "name": "convert+format HDG",
        "func": "/* convert and format heading\n*  Sentence:\n        magnetic sensor heading, degrees\n        magnetic deviation, degrees\n        magnetic deviation direction, E/W\n        magnetic variation, degrees\n        magnetic variation direction, E/W\n*/\n        var Hdg = new Object();\n        \n        Hdg.hdg = msg.Satz[1] + '°';\n        Hdg.dev = msg.Satz[2] + '°' +  msg.Satz[3];\n        Hdg.Decl= msg.Satz[4] + '°' + msg.Satz[5];\n    \n        return [Hdg];\n        ",
        "outputs": 1,
        "noerr": 0,
        "x": 1262.999984741211,
        "y": 1133.0000610351562,
        "wires": [
            [
                "1d8bab1a.9d13e5",
                "f473f957.1e34b8",
                "4504c710.d06e38"
            ]
        ]
    },
    {
        "id": "fa638f24.5d0808",
        "type": "ui_gauge",
        "z": "c4bfeb15a0b5facf",
        "name": "COG",
        "group": "b0652885.6c6d8",
        "order": 0,
        "width": 0,
        "height": 0,
        "gtype": "compass",
        "title": "Course over Ground",
        "label": "",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": "360",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1419.999984741211,
        "y": 747.0000610351562,
        "wires": []
    },
    {
        "id": "4450ef39.b653e",
        "type": "ui_gauge",
        "z": "c4bfeb15a0b5facf",
        "name": "",
        "group": "b0652885.6c6d8",
        "order": 0,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Speed Over Ground",
        "label": "units",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": "15",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1468.366683959961,
        "y": 715.2500610351562,
        "wires": []
    },
    {
        "id": "1d8bab1a.9d13e5",
        "type": "ui_text",
        "z": "c4bfeb15a0b5facf",
        "group": "596dfba5.8c720c",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "MgK",
        "format": "{{msg.hdg}}",
        "layout": "row-spread",
        "x": 1516.999984741211,
        "y": 1132.0000610351562,
        "wires": []
    },
    {
        "id": "f473f957.1e34b8",
        "type": "ui_text",
        "z": "c4bfeb15a0b5facf",
        "group": "596dfba5.8c720c",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "MW",
        "format": "{{msg.Decl}}",
        "layout": "row-spread",
        "x": 1516.999984741211,
        "y": 1165.0000610351562,
        "wires": []
    },
    {
        "id": "4504c710.d06e38",
        "type": "ui_text",
        "z": "c4bfeb15a0b5facf",
        "group": "596dfba5.8c720c",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "ABL",
        "format": "{{msg.dev}}",
        "layout": "row-spread",
        "x": 1517.999984741211,
        "y": 1196.0000610351562,
        "wires": []
    },
    {
        "id": "fa983ec4.b85ed8",
        "type": "comment",
        "z": "c4bfeb15a0b5facf",
        "name": "$SDHDG",
        "info": "Heading - Deviation & Variation",
        "x": 1074.999984741211,
        "y": 1119.0000610351562,
        "wires": []
    },
    {
        "id": "2e56675e.213948",
        "type": "function",
        "z": "c4bfeb15a0b5facf",
        "name": "convert+format XTE",
        "func": " //convert and format Cross Track Error\n \n \n        var value_in = msg.Satz[5];\n        \n        if ( value_in == \"N\")\n        {\n            msg.payload = msg.Satz[3] + \" nm\";\n        }\n        else\n        {\n           msg.payload = msg.Satz[3] + \" km\";\n            \n        }\n            \n        \n        return msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 440,
        "y": 60,
        "wires": [
            [
                "d52ea071.229ad8"
            ]
        ]
    },
    {
        "id": "d52ea071.229ad8",
        "type": "ui_text",
        "z": "c4bfeb15a0b5facf",
        "group": "e9660793.9419",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "XTE",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 617,
        "y": 60.05000305175781,
        "wires": []
    },
    {
        "id": "5253f12f.9c5218",
        "type": "function",
        "z": "c4bfeb15a0b5facf",
        "name": "Steer",
        "func": " //convert and format \"Steer R or L\"\n \n        msg.payload = msg.Satz[4] ;\n        \n        return msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 390.11669921875,
        "y": 90.94999694824219,
        "wires": [
            [
                "a4f2dc52.debdd"
            ]
        ]
    },
    {
        "id": "a4f2dc52.debdd",
        "type": "ui_text",
        "z": "c4bfeb15a0b5facf",
        "group": "e9660793.9419",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Steer",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 618.11669921875,
        "y": 90.94999694824219,
        "wires": []
    },
    {
        "id": "2d745c90.f289d4",
        "type": "function",
        "z": "c4bfeb15a0b5facf",
        "name": "Arrival circle entered",
        "func": " //convert and format \"Arrival circle entered\"\n \n    msg.payload = msg.Satz[6];\n  \n    return msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 440.11669921875,
        "y": 122.94999694824219,
        "wires": [
            [
                "e049a21d.1d73c8"
            ]
        ]
    },
    {
        "id": "e049a21d.1d73c8",
        "type": "ui_text",
        "z": "c4bfeb15a0b5facf",
        "group": "e9660793.9419",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Arrival Circle entered",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 670,
        "y": 123.05000305175781,
        "wires": []
    },
    {
        "id": "ebfbb77f.322348",
        "type": "function",
        "z": "c4bfeb15a0b5facf",
        "name": "WP perpendicular",
        "func": " //convert and format \"Perpendicular passed at waypoint \"\n \n    msg.payload = msg.Satz[7];\n  \n    return msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 431.11669921875,
        "y": 155.9499969482422,
        "wires": [
            [
                "1e65347c.887b0c"
            ]
        ]
    },
    {
        "id": "1e65347c.887b0c",
        "type": "ui_text",
        "z": "c4bfeb15a0b5facf",
        "group": "e9660793.9419",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "WP perpendicular",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 659.11669921875,
        "y": 154.9499969482422,
        "wires": []
    },
    {
        "id": "71056213.0948d4",
        "type": "function",
        "z": "c4bfeb15a0b5facf",
        "name": "Bearing O2D",
        "func": " //convert and format \"Bearing origin to destination\"\n \n \n        var value_in = msg.Satz[9];\n        \n        \n        \n        if ( value_in == \"M\")\n        {\n            msg.payload = msg.Satz[8] + \" mag\";\n        }\n        else\n        {\n           msg.payload = msg.Satz[8] + \" true\";\n            \n        }\n            \n        \n        return msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 410.11669921875,
        "y": 186.9499969482422,
        "wires": [
            [
                "17ca4c63.a92b14"
            ]
        ]
    },
    {
        "id": "17ca4c63.a92b14",
        "type": "ui_text",
        "z": "c4bfeb15a0b5facf",
        "group": "e9660793.9419",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Bearing Org to Dest",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 672,
        "y": 187.0500030517578,
        "wires": []
    },
    {
        "id": "b0241d9e.b8787",
        "type": "function",
        "z": "c4bfeb15a0b5facf",
        "name": "Dest. WP",
        "func": " //convert and format \"Desitiantion way point\"\n \n    msg.payload = msg.Satz[10];\n  \n    return msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 401.11669921875,
        "y": 218.9499969482422,
        "wires": [
            [
                "c6dfa630.f6988"
            ]
        ]
    },
    {
        "id": "c6dfa630.f6988",
        "type": "ui_text",
        "z": "c4bfeb15a0b5facf",
        "group": "e9660793.9419",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Destination Waypoint",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 671.11669921875,
        "y": 216.9499969482422,
        "wires": []
    },
    {
        "id": "e9650e7c.b6d4e8",
        "type": "function",
        "z": "c4bfeb15a0b5facf",
        "name": "Bearing Pos2D",
        "func": " //convert and format \"Bearing position to destination\"\n \n \n        var value_in = msg.Satz[12];\n        \n        \n        \n        if ( value_in == \"M\")\n        {\n            msg.payload = msg.Satz[11] + \" mag\";\n        }\n        else\n        {\n           msg.payload = msg.Satz[11] + \" true\";\n            \n        }\n            \n        \n        return msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 421.11669921875,
        "y": 250.9499969482422,
        "wires": [
            [
                "fb3e99ba.531b38"
            ]
        ]
    },
    {
        "id": "fb3e99ba.531b38",
        "type": "ui_text",
        "z": "c4bfeb15a0b5facf",
        "group": "e9660793.9419",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Bearing Pos to Dest",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 672.11669921875,
        "y": 248.9499969482422,
        "wires": []
    },
    {
        "id": "cf394344.555e28",
        "type": "comment",
        "z": "c4bfeb15a0b5facf",
        "name": "$GPABP",
        "info": "Autopilot Sentence \"B\"",
        "x": 340,
        "y": 340,
        "wires": []
    },
    {
        "id": "72709359.a9442c",
        "type": "function",
        "z": "c4bfeb15a0b5facf",
        "name": "HDG Pos2D",
        "func": " //convert and format \"Heading position to destination\"\n \n        var value_in = msg.Satz[14];\n        \n        \n        \n        if ( value_in == \"M\")\n        {\n            msg.payload = msg.Satz[13] + \" mag\";\n        }\n        else\n        {\n           msg.payload = msg.Satz[13] + \" true\";\n            \n        }\n            \n        \n        return msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 412.11669921875,
        "y": 283.9499969482422,
        "wires": [
            [
                "48b816e5.5c08f8"
            ]
        ]
    },
    {
        "id": "48b816e5.5c08f8",
        "type": "ui_text",
        "z": "c4bfeb15a0b5facf",
        "group": "e9660793.9419",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Heading Pos to Dest",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 672.11669921875,
        "y": 282.9499969482422,
        "wires": []
    },
    {
        "id": "383c8f63.862828",
        "type": "function",
        "z": "c4bfeb15a0b5facf",
        "name": "convert+format UTC",
        "func": " //convert and format \"UTC\"\n // Sentence GGA\n \n        var value_in = msg.Satz[1];\n    \n        msg.payload = value_in.substr(0,2) + ':' + value_in.substr(2,2) + \":\" + value_in.substr(4,2);\n     \n        return [msg];\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 1219.999984741211,
        "y": 155.00006103515625,
        "wires": [
            [
                "1ed95404.1211fc",
                "eaa184832f406914"
            ]
        ]
    },
    {
        "id": "1ed95404.1211fc",
        "type": "ui_text",
        "z": "c4bfeb15a0b5facf",
        "group": "604ac05d.2accd8",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "UTC",
        "label": "UTC",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1407.999984741211,
        "y": 155.00006103515625,
        "wires": []
    },
    {
        "id": "790afbd7.3654ec",
        "type": "function",
        "z": "c4bfeb15a0b5facf",
        "name": "GPS quality",
        "func": "//convert and format \"GPS quality\"\n // Sentence GGA\n \nvar Mesg;\nGPS_Q = msg.Satz[6];\n\nswitch(GPS_Q){\n    case '0': msg.payload = \"fix no available\";\n              break;\n    case '1': msg.payload = \"GPS fix\";\n              break;\n    case '2': msg.payload = \"Differential GPS fix\";\n}\n    return msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1200.999984741211,
        "y": 184.00006103515625,
        "wires": [
            [
                "55ced550.baf934",
                "6942ec31cde0ccab"
            ]
        ]
    },
    {
        "id": "55ced550.baf934",
        "type": "ui_text",
        "z": "c4bfeb15a0b5facf",
        "group": "604ac05d.2accd8",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "GPS quality",
        "label": "GPS quality",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1428.999984741211,
        "y": 185.00006103515625,
        "wires": []
    },
    {
        "id": "ea51a00a.bdc058",
        "type": "function",
        "z": "c4bfeb15a0b5facf",
        "name": "# of sat",
        "func": " //convert and format \"number of satellites\"\n // Sentence GGA\n \n        msg.payload = msg.Satz[7];\n        return [msg];\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 1190.999984741211,
        "y": 216.00006103515625,
        "wires": [
            [
                "3e3bd906.6da186",
                "7d41dce6411c8a73"
            ]
        ]
    },
    {
        "id": "3e3bd906.6da186",
        "type": "ui_text",
        "z": "c4bfeb15a0b5facf",
        "group": "604ac05d.2accd8",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "number of sats",
        "label": "number of sats",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1438.999984741211,
        "y": 216.00006103515625,
        "wires": []
    },
    {
        "id": "ba9301fb.df0bf",
        "type": "comment",
        "z": "c4bfeb15a0b5facf",
        "name": "$GPGGA",
        "info": "Global Positioning System Fix Data, \nTime, Position and fix related data \nfor a GPS receiver.",
        "x": 522.9999847412109,
        "y": 447.00006103515625,
        "wires": []
    },
    {
        "id": "2d9a8d4.ca16072",
        "type": "function",
        "z": "c4bfeb15a0b5facf",
        "name": "HDOP",
        "func": "//convert and format \"HDOP\"\n// Horizontal Dilution of precision\n// Sentence GGA\n\n\n msg.payload = msg.Satz[8];\n return [msg];\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 1182.999984741211,
        "y": 247.00006103515625,
        "wires": [
            [
                "532123d8.be750c"
            ]
        ]
    },
    {
        "id": "532123d8.be750c",
        "type": "ui_text",
        "z": "c4bfeb15a0b5facf",
        "group": "604ac05d.2accd8",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "HDOP",
        "label": "HDOP",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1409.999984741211,
        "y": 248.00006103515625,
        "wires": []
    },
    {
        "id": "280c7f71.9397d",
        "type": "function",
        "z": "c4bfeb15a0b5facf",
        "name": "Antenna Alt.",
        "func": "//convert and format \"antenna altitude\"\n// Sentence GGA\n// Antenna Altitude above/below mean-sea-level (geoid)\n\n msg.payload = msg.Satz[9];\n return [msg];\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 1203.766616821289,
        "y": 279.1667175292969,
        "wires": [
            [
                "c9ddc138.379ae8"
            ]
        ]
    },
    {
        "id": "c9ddc138.379ae8",
        "type": "ui_text",
        "z": "c4bfeb15a0b5facf",
        "group": "604ac05d.2accd8",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Antenna altitude",
        "label": "Antenna altitude",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1439.0832977294922,
        "y": 280.0834045410156,
        "wires": []
    },
    {
        "id": "596a9de6.3d287c",
        "type": "function",
        "z": "c4bfeb15a0b5facf",
        "name": "convert+format XTE",
        "func": " //convert and format Cross Track Error\n \n \n       \n    msg.payload = msg.Satz[2] + \" nm\";\n    return msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 1235.883285522461,
        "y": 318.8833923339844,
        "wires": [
            [
                "2446ca21.7fa01e"
            ]
        ]
    },
    {
        "id": "26ba8e99.84094a",
        "type": "comment",
        "z": "c4bfeb15a0b5facf",
        "name": "$GPRMB",
        "info": "",
        "x": 552.7665863037109,
        "y": 545.0667114257812,
        "wires": []
    },
    {
        "id": "c1cc9a22.1cbdb",
        "type": "function",
        "z": "c4bfeb15a0b5facf",
        "name": "Steer",
        "func": " //convert and format \"Steer R or L\"\n \n        msg.payload = msg.Satz[3] ;\n        \n        return msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 1186.883285522461,
        "y": 350.8833923339844,
        "wires": [
            [
                "ab3368d0.5a222"
            ]
        ]
    },
    {
        "id": "d226219c.7afe7",
        "type": "function",
        "z": "c4bfeb15a0b5facf",
        "name": "To WP",
        "func": " //convert and format \"Desitiantion way point\"\n \n    msg.payload = msg.Satz[5];\n  \n    return msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 1187.883285522461,
        "y": 416.88336181640625,
        "wires": [
            [
                "1fc82d5e.c28973"
            ]
        ]
    },
    {
        "id": "1fc82d5e.c28973",
        "type": "ui_text",
        "z": "c4bfeb15a0b5facf",
        "group": "2e992207.609d26",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "To Waypoint",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1431.883285522461,
        "y": 416.88336181640625,
        "wires": []
    },
    {
        "id": "fe71afe3.a3853",
        "type": "function",
        "z": "c4bfeb15a0b5facf",
        "name": "From WP",
        "func": " //convert and format \"Desitiantion way point\"\n \n    msg.payload = msg.Satz[4];\n  \n    return msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 1195.883285522461,
        "y": 383.88336181640625,
        "wires": [
            [
                "31aa5072.e3807"
            ]
        ]
    },
    {
        "id": "31aa5072.e3807",
        "type": "ui_text",
        "z": "c4bfeb15a0b5facf",
        "group": "2e992207.609d26",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "From Waypoint",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1441.883285522461,
        "y": 383.88336181640625,
        "wires": []
    },
    {
        "id": "e10f8eca.77985",
        "type": "function",
        "z": "c4bfeb15a0b5facf",
        "name": "Dest. WP LAT",
        "func": " //convert and format latitude\n \n        var value_in = msg.Satz[6];\n    \n        msg.payload = value_in.substr(0,2) + '°' + ' ' + value_in.substr(2,5) + \"' \" + msg.Satz[7];\n     \n        return [msg];\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 1216.999984741211,
        "y": 449.00006103515625,
        "wires": [
            [
                "b94ff398.d4114"
            ]
        ]
    },
    {
        "id": "b94ff398.d4114",
        "type": "ui_text",
        "z": "c4bfeb15a0b5facf",
        "group": "2e992207.609d26",
        "order": 5,
        "width": "0",
        "height": "0",
        "name": "Dest.WP LAT",
        "label": "Dest.WP LAT",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1445.999984741211,
        "y": 449.00006103515625,
        "wires": []
    },
    {
        "id": "6beb0a5.8ca2674",
        "type": "function",
        "z": "c4bfeb15a0b5facf",
        "name": "Dest. WP LON",
        "func": "// convert and format longitude\n\n  var value_in = msg.Satz[8];\n        \n  msg.payload = value_in.substr(0,3) + '°' + ' ' + value_in.substr(3,5) + \"' \" + msg.Satz[9];\n  \n  return msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 1219.999984741211,
        "y": 481.00006103515625,
        "wires": [
            [
                "7ad3724f.4bf6bc"
            ]
        ]
    },
    {
        "id": "7ad3724f.4bf6bc",
        "type": "ui_text",
        "z": "c4bfeb15a0b5facf",
        "group": "2e992207.609d26",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "Dest. WP LON",
        "label": "Dest. WP LON",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1443.999984741211,
        "y": 481.00006103515625,
        "wires": []
    },
    {
        "id": "518ee0be.1270a8",
        "type": "function",
        "z": "c4bfeb15a0b5facf",
        "name": "Range to Dest.",
        "func": "// convert and format longitude\n\nmsg.payload = msg.Satz[10] + ' nm' ;\n  \nreturn msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 1220.749984741211,
        "y": 513.7500610351562,
        "wires": [
            [
                "ce0b29a9.5ee6c"
            ]
        ]
    },
    {
        "id": "ce0b29a9.5ee6c",
        "type": "ui_text",
        "z": "c4bfeb15a0b5facf",
        "group": "2e992207.609d26",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "Range to Dest.",
        "label": "Range to Dest.",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1443.749984741211,
        "y": 513.7500610351562,
        "wires": []
    },
    {
        "id": "9dd9f599.4fc9b",
        "type": "function",
        "z": "c4bfeb15a0b5facf",
        "name": "BRG to Dest.",
        "func": " //convert and format latitude\n \n        msg.payload = msg.Satz[11]\n        return msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 1210.999984741211,
        "y": 545.0000610351562,
        "wires": [
            [
                "b9230e9d.e7a31"
            ]
        ]
    },
    {
        "id": "b9230e9d.e7a31",
        "type": "ui_text",
        "z": "c4bfeb15a0b5facf",
        "group": "2e992207.609d26",
        "order": 8,
        "width": "0",
        "height": "0",
        "name": "BRG to Dest.",
        "label": "BRG to Dest.",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1439.999984741211,
        "y": 545.0000610351562,
        "wires": []
    },
    {
        "id": "c9f48ea5.bbc318",
        "type": "function",
        "z": "c4bfeb15a0b5facf",
        "name": "VMG to Dest.",
        "func": " //convert and format latitude\n \n        msg.payload = msg.Satz[12];\n        return msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 1221.999984741211,
        "y": 577.0000610351562,
        "wires": [
            [
                "21b93ff4.7965f"
            ]
        ]
    },
    {
        "id": "21b93ff4.7965f",
        "type": "ui_text",
        "z": "c4bfeb15a0b5facf",
        "group": "2e992207.609d26",
        "order": 9,
        "width": "0",
        "height": "0",
        "name": "VMG to Dest.",
        "label": "VMG to Dest.",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1450.999984741211,
        "y": 577.0000610351562,
        "wires": []
    },
    {
        "id": "c3a5f175.8c11e8",
        "type": "function",
        "z": "c4bfeb15a0b5facf",
        "name": "Arrival Status",
        "func": " //convert and format latitude\n \n        msg.payload = msg.Satz[13];\n        return msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 1222.999984741211,
        "y": 609.0000610351562,
        "wires": [
            [
                "9dd6929a.e86b1"
            ]
        ]
    },
    {
        "id": "9dd6929a.e86b1",
        "type": "ui_text",
        "z": "c4bfeb15a0b5facf",
        "group": "2e992207.609d26",
        "order": 10,
        "width": "0",
        "height": "0",
        "name": "Arrival Status",
        "label": "Arrival Status",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1451.999984741211,
        "y": 609.0000610351562,
        "wires": []
    },
    {
        "id": "2130a8aa.64d14",
        "type": "function",
        "z": "c4bfeb15a0b5facf",
        "name": "Track Degrees true",
        "func": " //convert and format latitude\n \n        msg.payload = msg.Satz[1];\n        return msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 1234.749984741211,
        "y": 782.7500610351562,
        "wires": [
            [
                "73ac04e1.52c2f4"
            ]
        ]
    },
    {
        "id": "73ac04e1.52c2f4",
        "type": "ui_text",
        "z": "c4bfeb15a0b5facf",
        "group": "2e992207.609d26",
        "order": 11,
        "width": "0",
        "height": "0",
        "name": "Track Degrees true",
        "label": "Track Degrees (true)",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1445.749984741211,
        "y": 782.7500610351562,
        "wires": []
    },
    {
        "id": "99439ad8.679d98",
        "type": "comment",
        "z": "c4bfeb15a0b5facf",
        "name": "$GPVTG",
        "info": "Track made good and ground speed",
        "x": 742.7665863037109,
        "y": 719.8667602539062,
        "wires": []
    },
    {
        "id": "b6806f11.d449b8",
        "type": "function",
        "z": "c4bfeb15a0b5facf",
        "name": "Track Degrees mag",
        "func": " //convert and format latitude\n \n        msg.payload = msg.Satz[3];\n        return msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 1243.883285522461,
        "y": 815.8833312988281,
        "wires": [
            [
                "b4630c19.d0cf8"
            ]
        ]
    },
    {
        "id": "b4630c19.d0cf8",
        "type": "ui_text",
        "z": "c4bfeb15a0b5facf",
        "group": "2e992207.609d26",
        "order": 12,
        "width": "0",
        "height": "0",
        "name": "Track Degrees (mag)",
        "label": "Track Degrees (mag)",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1459.883285522461,
        "y": 816.8833618164062,
        "wires": []
    },
    {
        "id": "89cf9c1d.dd772",
        "type": "function",
        "z": "c4bfeb15a0b5facf",
        "name": "SOG (kn)",
        "func": " //convert and format latitude\n \n        msg.payload = msg.Satz[5] + \" kn\";\n        return msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 1203.883285522461,
        "y": 848.4833374023438,
        "wires": [
            [
                "c51e54a0.08597"
            ]
        ]
    },
    {
        "id": "c51e54a0.08597",
        "type": "ui_text",
        "z": "c4bfeb15a0b5facf",
        "group": "2e992207.609d26",
        "order": 14,
        "width": "0",
        "height": "0",
        "name": "SOG (kn)",
        "label": "SOG (kn)",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1419.883285522461,
        "y": 849.4833679199219,
        "wires": []
    },
    {
        "id": "2d45a331.50e0ec",
        "type": "function",
        "z": "c4bfeb15a0b5facf",
        "name": "TransducerData",
        "func": "\"use strict\"\n\nvar NumEntries,i,j;\n\nvar TDValues = [];\n\nNumEntries = (msg.Satz.length - 2)/4;\n\nTDValues[0] = [msg.Satz[8],  msg.Satz[5],  msg.Satz[6],  msg.Satz[7]];\nTDValues[1] = [msg.Satz[4],  msg.Satz[1],  msg.Satz[2],  msg.Satz[3]];\nTDValues[2] = [msg.Satz[16], msg.Satz[13], msg.Satz[14], msg.Satz[15]];\nTDValues[3] = [msg.Satz[20], msg.Satz[17], msg.Satz[18], msg.Satz[19]];\nTDValues[4] = [msg.Satz[12], msg.Satz[9],  msg.Satz[10], msg.Satz[11]];\n\n\n/*\nfor ( i = 1; i <= NumEntries; i++)\n{\n    j = (i-1)*4+1;\n    TDValues[i] = [msg.Satz[j+3],msg.Satz[j+0],msg.Satz[j+1],msg.Satz[j+2]];\n}\n*/\n\nmsg.payload = TDValues;\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1225.766586303711,
        "y": 927.3334045410156,
        "wires": [
            [
                "256561c.b86a09e"
            ]
        ]
    },
    {
        "id": "b8466a06.c72b58",
        "type": "tcp in",
        "z": "c4bfeb15a0b5facf",
        "name": "Get NMEA from SignalK",
        "server": "client",
        "host": "192.168.3.21",
        "port": "10110",
        "datamode": "stream",
        "datatype": "utf8",
        "newline": "\\n",
        "topic": "",
        "trim": false,
        "base64": false,
        "tls": "",
        "x": 148.88331604003906,
        "y": 375.8833923339844,
        "wires": [
            [
                "52228ddc.131534"
            ]
        ]
    },
    {
        "id": "256561c.b86a09e",
        "type": "ui_template",
        "z": "c4bfeb15a0b5facf",
        "group": "40a6636b.25d694",
        "name": "Transducer Data",
        "order": 1,
        "width": "6",
        "height": "6",
        "format": "<table id=\"table\" border=\"1\">\n <tr>\n <th>Name</th> \n <th>Type</th>\n <th>Data</th>\n <th>Unit</th>\n </tr>\n <tbody>\n <tr ng-repeat=\"row in msg.payload\">\n <td ng-repeat=\"item in row\" >{{item}}</td>\n </tr>\n </tbody>\n</table>\n\n",
        "storeOutMessages": false,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 1448.999984741211,
        "y": 926.0000305175781,
        "wires": [
            []
        ]
    },
    {
        "id": "3e5a796a.70c10e",
        "type": "comment",
        "z": "c4bfeb15a0b5facf",
        "name": "$IIXDR",
        "info": "",
        "x": 1017.7665863037109,
        "y": 881.0667114257812,
        "wires": []
    },
    {
        "id": "2a55966b.9a9ae2",
        "type": "function",
        "z": "c4bfeb15a0b5facf",
        "name": "depth b. transd. (feet)",
        "func": "// $SDDBT\n// convert and format depth\n\nmsg.payload = msg.Satz[1]; // + ' f';\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1245.800033569336,
        "y": 963.2833862304688,
        "wires": [
            [
                "5ec2cf7a.f04bd",
                "52d366c88ff7b336"
            ]
        ]
    },
    {
        "id": "5ec2cf7a.f04bd",
        "type": "ui_text",
        "z": "c4bfeb15a0b5facf",
        "group": "f0a8cf1.e62c73",
        "order": 10,
        "width": "0",
        "height": "0",
        "name": "Depth (feet)",
        "label": "Depth (feet)",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1454.8000946044922,
        "y": 963.2834167480469,
        "wires": []
    },
    {
        "id": "3f5e9d86.994432",
        "type": "function",
        "z": "c4bfeb15a0b5facf",
        "name": "depth b. transd. (meter)",
        "func": " // $SDDBT\n // convert and format depth\n \n        msg.payload = msg.Satz[3] + 'm ';\n        return msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 1246.800033569336,
        "y": 995.2833862304688,
        "wires": [
            [
                "a2b77259.a29848"
            ]
        ]
    },
    {
        "id": "a2b77259.a29848",
        "type": "ui_text",
        "z": "c4bfeb15a0b5facf",
        "group": "f0a8cf1.e62c73",
        "order": 10,
        "width": "0",
        "height": "0",
        "name": "Depth (meter)",
        "label": "Depth (meter)",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1455.8000946044922,
        "y": 995.2834167480469,
        "wires": []
    },
    {
        "id": "a24c1e8e.8ca888",
        "type": "function",
        "z": "c4bfeb15a0b5facf",
        "name": "depth b. transd. (fathoms)",
        "func": " // $SDDBT\n // convert and format depth\n \n        msg.payload = msg.Satz[5] + 'fth';\n        return msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 1256.800033569336,
        "y": 1026.2833862304688,
        "wires": [
            [
                "bcd53fe.5db604"
            ]
        ]
    },
    {
        "id": "bcd53fe.5db604",
        "type": "ui_text",
        "z": "c4bfeb15a0b5facf",
        "group": "f0a8cf1.e62c73",
        "order": 10,
        "width": "0",
        "height": "0",
        "name": "Depth (fathoms)",
        "label": "Depth (fathoms)",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1465.8000946044922,
        "y": 1026.2833862304688,
        "wires": []
    },
    {
        "id": "414ae62b.0e8c3",
        "type": "comment",
        "z": "c4bfeb15a0b5facf",
        "name": "$SDDBT",
        "info": "",
        "x": 986.3666839599609,
        "y": 945.0000610351562,
        "wires": []
    },
    {
        "id": "3477d8db.5a6e48",
        "type": "function",
        "z": "c4bfeb15a0b5facf",
        "name": "Depth of Water",
        "func": "// $SDDPT\n// convert and format depth\n// \n\nmsg.payload = msg.Satz[2] + ' ' + msg.Satz[1] + \"m\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1242.749984741211,
        "y": 1093.7500610351562,
        "wires": [
            [
                "fae3ff25.7351f8"
            ]
        ]
    },
    {
        "id": "fae3ff25.7351f8",
        "type": "ui_text",
        "z": "c4bfeb15a0b5facf",
        "group": "f0a8cf1.e62c73",
        "order": 10,
        "width": "0",
        "height": "0",
        "name": "Depth of Water",
        "label": "Depth of Water",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1545.749984741211,
        "y": 1093.7500610351562,
        "wires": []
    },
    {
        "id": "561f9b31.2f2824",
        "type": "comment",
        "z": "c4bfeb15a0b5facf",
        "name": "$SDDPT",
        "info": "",
        "x": 1010.7499847412109,
        "y": 1034.7500610351562,
        "wires": []
    },
    {
        "id": "f57075d8.2c12c8",
        "type": "function",
        "z": "c4bfeb15a0b5facf",
        "name": "convert+format VHW",
        "func": "/* convert and format VHW velocity, heading through water\n*  Sentence:\n        Degrees True\n        'T'\n        Degrees Magnetic\n        'M'\n        knots, speed relative to the water\n        'K'\n        kilometers, speed relative to water\n        'K'\n*/\n  \n        var Vhw = new Object();\n        \n        Vhw.tHdg = msg.Satz[1] + '°' + msg.Satz[2];\n        Vhw.mHdg = msg.Satz[3] + '°' +  msg.Satz[4];\n        Vhw.knSpd= msg.Satz[5] + '°' + 'kn';\n        Vhw.kmSpd= msg.Satz[7] + '°' +  'km';\n    \n        return [Vhw];\n        ",
        "outputs": 1,
        "noerr": 0,
        "x": 1264.749984741211,
        "y": 1278.7500610351562,
        "wires": [
            [
                "f46d6eb6.039798",
                "309b8dc.9284af2",
                "a809e211.894bb8",
                "2db3dd55.24141a"
            ]
        ]
    },
    {
        "id": "f46d6eb6.039798",
        "type": "ui_text",
        "z": "c4bfeb15a0b5facf",
        "group": "596dfba5.8c720c",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "HDG (true)",
        "label": "HDG (true)",
        "format": "{{msg.tHdg}}",
        "layout": "row-spread",
        "x": 1535.749984741211,
        "y": 1275.7500610351562,
        "wires": []
    },
    {
        "id": "309b8dc.9284af2",
        "type": "ui_text",
        "z": "c4bfeb15a0b5facf",
        "group": "596dfba5.8c720c",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "HDG (mag)",
        "label": "HDG (mag)",
        "format": "{{msg.mHdg}}",
        "layout": "row-spread",
        "x": 1535.749984741211,
        "y": 1308.7500610351562,
        "wires": []
    },
    {
        "id": "a809e211.894bb8",
        "type": "ui_text",
        "z": "c4bfeb15a0b5facf",
        "group": "596dfba5.8c720c",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "Speed trough Water (kn)",
        "label": "Speed trough Water (kn)",
        "format": "{{msg.knSpd}}",
        "layout": "row-spread",
        "x": 1576.749984741211,
        "y": 1339.7500610351562,
        "wires": []
    },
    {
        "id": "146651da.31421e",
        "type": "function",
        "z": "c4bfeb15a0b5facf",
        "name": "Water temp.",
        "func": "/*\nUnclear why some sentences other than \"MTW\"\nare in this channel. Kill them.\n*/\n\nif ( msg.Satz[0] !== '$SDMTW')\n    msg = null;\nelse \n    msg.payload = msg.Satz[1] + '°' + msg.Satz[2];\n        \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1234.999984741211,
        "y": 1231.0000610351562,
        "wires": [
            [
                "659f8368.6cadcc"
            ]
        ]
    },
    {
        "id": "659f8368.6cadcc",
        "type": "ui_text",
        "z": "c4bfeb15a0b5facf",
        "group": "f0a8cf1.e62c73",
        "order": 10,
        "width": "0",
        "height": "0",
        "name": "Water temp.",
        "label": "Water temp.",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1538.066635131836,
        "y": 1236.6834106445312,
        "wires": []
    },
    {
        "id": "2db3dd55.24141a",
        "type": "ui_text",
        "z": "c4bfeb15a0b5facf",
        "group": "596dfba5.8c720c",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "Speed trough Water (km)",
        "label": "Speed trough Water (km)",
        "format": "{{msg.kmSpd}}",
        "layout": "row-spread",
        "x": 1577.883285522461,
        "y": 1372.8833618164062,
        "wires": []
    },
    {
        "id": "bb3c46cc.6266c",
        "type": "function",
        "z": "c4bfeb15a0b5facf",
        "name": "Dist.travelled tr. water",
        "func": "/* $SDVLW\n   Distance Traveled through Water\n\nDisclaimer: VLW is not conistently documented.\nMost docs describe only two values \n - \"Total cumulative distance\"\n - \"distance since Reset\" \n plus units each.\n I found this:\n \n$--VLW,x.x,N,x.x,N,x.x,N,x.x,N*hh<CR><LF>\n    $--: Talker identifier*\n    VLW: Sentence formatter*\n    x.x,N: Total cumulative water distance, nautical miles*\n    x.x,N: Water distance since reset, nautical miles*\n    x.x,N: Total cumulative ground distance, nautical miles*\n    x.x,N: Ground distance since reset, nautical miles*\n    *hh: Checksum*\n\n */\n\n        var Vlw = {}; \n     \n        Vlw.ToWD = msg.Satz[1] + ' nm';\n        Vlw.TrWD = msg.Satz[3] + ' nm';\n        Vlw.ToGD = msg.Satz[5] + ' nm';\n        Vlw.TrGD = msg.Satz[7] + ' nm';\n    \n        return [Vlw];\n        \n ",
        "outputs": 1,
        "noerr": 0,
        "x": 1263.883285522461,
        "y": 1417.4835205078125,
        "wires": [
            [
                "5459597e.30b578",
                "33dc8096.ca6848",
                "d4852b88.5aa898",
                "e7b0abb5.80d67"
            ]
        ]
    },
    {
        "id": "5459597e.30b578",
        "type": "ui_text",
        "z": "c4bfeb15a0b5facf",
        "group": "1bfc320.838e14e",
        "order": 3,
        "width": "0",
        "height": "0",
        "name": "Total water dist.",
        "label": "Total water dist.",
        "format": "{{msg.ToWD}}",
        "layout": "row-spread",
        "x": 1563.883285522461,
        "y": 1421.4835205078125,
        "wires": []
    },
    {
        "id": "e7b0abb5.80d67",
        "type": "ui_text",
        "z": "c4bfeb15a0b5facf",
        "group": "1bfc320.838e14e",
        "order": 2,
        "width": "0",
        "height": "0",
        "name": "Trip ground Dist.",
        "label": "Trip ground Dist.",
        "format": "{{msg.TrGD}}",
        "layout": "row-spread",
        "x": 1578.5333099365234,
        "y": 1517.083251953125,
        "wires": []
    },
    {
        "id": "d4852b88.5aa898",
        "type": "ui_text",
        "z": "c4bfeb15a0b5facf",
        "group": "1bfc320.838e14e",
        "order": 4,
        "width": "0",
        "height": "0",
        "name": "Total Ground Dist.",
        "label": "Total Ground Dist.",
        "format": "{{msg.ToGD}}",
        "layout": "row-spread",
        "x": 1576.5333099365234,
        "y": 1484.083251953125,
        "wires": []
    },
    {
        "id": "33dc8096.ca6848",
        "type": "ui_text",
        "z": "c4bfeb15a0b5facf",
        "group": "1bfc320.838e14e",
        "order": 1,
        "width": "0",
        "height": "0",
        "name": "Trip water dist.",
        "label": "Trip water dist.",
        "format": "{{msg.TrWD}}",
        "layout": "row-spread",
        "x": 1566.5333099365234,
        "y": 1452.0833129882812,
        "wires": []
    },
    {
        "id": "2446ca21.7fa01e",
        "type": "ui_text",
        "z": "c4bfeb15a0b5facf",
        "group": "7db9a1f8.c9b498",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "XTE",
        "label": "XTE",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1411.749984741211,
        "y": 317.75006103515625,
        "wires": []
    },
    {
        "id": "ab3368d0.5a222",
        "type": "ui_text",
        "z": "c4bfeb15a0b5facf",
        "group": "7db9a1f8.c9b498",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Steer",
        "label": "Steer",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1413.749984741211,
        "y": 351.75006103515625,
        "wires": []
    },
    {
        "id": "4d476aef0bb45ca9",
        "type": "ha-sensor",
        "z": "c4bfeb15a0b5facf",
        "name": "SOG",
        "entityConfig": "36538c2b4ee8c5bc",
        "version": 0,
        "state": "payload",
        "stateType": "msg",
        "attributes": [],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 1730,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "d905719b18ed91bb",
        "type": "ha-sensor",
        "z": "c4bfeb15a0b5facf",
        "name": "COG",
        "entityConfig": "c4760c4026b9fbb6",
        "version": 0,
        "state": "payload",
        "stateType": "msg",
        "attributes": [],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 1730,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "1b620e7aa964c035",
        "type": "ha-sensor",
        "z": "c4bfeb15a0b5facf",
        "name": "LAT",
        "entityConfig": "172c54578c852f2d",
        "version": 0,
        "state": "payload",
        "stateType": "msg",
        "attributes": [],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 1650,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "11bcde88b3734685",
        "type": "ha-sensor",
        "z": "c4bfeb15a0b5facf",
        "name": "LON",
        "entityConfig": "2482184f4ad2eb67",
        "version": 0,
        "state": "payload",
        "stateType": "msg",
        "attributes": [],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 1650,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "52d366c88ff7b336",
        "type": "ha-sensor",
        "z": "c4bfeb15a0b5facf",
        "name": "Depth",
        "entityConfig": "116cf96ee16cb2e3",
        "version": 0,
        "state": "payload",
        "stateType": "msg",
        "attributes": [],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 1650,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "a4606b369a33247e",
        "type": "debug",
        "z": "c4bfeb15a0b5facf",
        "name": "debug1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 1340,
        "wires": []
    },
    {
        "id": "eaa184832f406914",
        "type": "ha-sensor",
        "z": "c4bfeb15a0b5facf",
        "name": "GPSTime",
        "entityConfig": "95237685892bad5f",
        "version": 0,
        "state": "payload",
        "stateType": "msg",
        "attributes": [],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 1750,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "6942ec31cde0ccab",
        "type": "ha-sensor",
        "z": "c4bfeb15a0b5facf",
        "name": "GPSQuality",
        "entityConfig": "f7e733d2f1e66d00",
        "version": 0,
        "state": "payload",
        "stateType": "msg",
        "attributes": [],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 1750,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "7d41dce6411c8a73",
        "type": "ha-sensor",
        "z": "c4bfeb15a0b5facf",
        "name": "GPSSatellites",
        "entityConfig": "7d1bd98111c9f44c",
        "version": 0,
        "state": "payload",
        "stateType": "msg",
        "attributes": [],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 1760,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "99ce38a14c770a8a",
        "type": "function",
        "z": "c4bfeb15a0b5facf",
        "name": "AWS",
        "func": "// $IIVWR\n\n\nmsg.payload = msg.Satz[3];\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 1640,
        "wires": [
            [
                "f6c2c9f352d77da5",
                "974327eecae6496d"
            ]
        ]
    },
    {
        "id": "f6c2c9f352d77da5",
        "type": "ui_text",
        "z": "c4bfeb15a0b5facf",
        "group": "40a6636b.25d694",
        "order": 10,
        "width": "0",
        "height": "0",
        "name": "AWS",
        "label": "AWS",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1469.0000610351562,
        "y": 1640.0000305175781,
        "wires": []
    },
    {
        "id": "974327eecae6496d",
        "type": "ha-sensor",
        "z": "c4bfeb15a0b5facf",
        "name": "AWS",
        "entityConfig": "97b112372f52f973",
        "version": 0,
        "state": "payload",
        "stateType": "msg",
        "attributes": [],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 1670,
        "y": 1640,
        "wires": [
            []
        ]
    },
    {
        "id": "b6c7c58f9a532823",
        "type": "comment",
        "z": "c4bfeb15a0b5facf",
        "name": "$IIVWR",
        "info": "Wind Speed and Direction",
        "x": 830,
        "y": 1300,
        "wires": []
    },
    {
        "id": "fe312ce6da53ef24",
        "type": "function",
        "z": "c4bfeb15a0b5facf",
        "name": "AWA",
        "func": "// $IIVWR\n// Output delivered as 0-360 to work with 'compass card' in HA\n\n//msg.payload = msg.Satz[1] + msg.Satz[2];\n\nif (msg.Satz[2] === 'L') {\n    msg.payload = 360 - msg.Satz[1];\n} else {\n    msg.payload = msg.Satz[1];\n} \nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 1580,
        "wires": [
            [
                "b51a1286c1342a42",
                "65d3a3f084a1f728"
            ]
        ]
    },
    {
        "id": "b51a1286c1342a42",
        "type": "ui_text",
        "z": "c4bfeb15a0b5facf",
        "group": "40a6636b.25d694",
        "order": 10,
        "width": "0",
        "height": "0",
        "name": "AWA",
        "label": "Apparent Wind Angle",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1469.0000610351562,
        "y": 1580.0000305175781,
        "wires": []
    },
    {
        "id": "65d3a3f084a1f728",
        "type": "ha-sensor",
        "z": "c4bfeb15a0b5facf",
        "name": "AWA",
        "entityConfig": "6eae8aaf035d4363",
        "version": 0,
        "state": "payload",
        "stateType": "msg",
        "attributes": [],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 1670,
        "y": 1580,
        "wires": [
            []
        ]
    },
    {
        "id": "33634a0f65e06421",
        "type": "function",
        "z": "a3bd807ce6f6d210",
        "name": "NMEA: main filter",
        "func": "/* \n   Filter NMEA sentences. Known sentences:\n   $GPAAM, $GPAPB, $GPBOD, $GPGGA, $GPGLC, $GPGLL, \n   $GPGSA, $GPGSV, $GPRMB, $GPRMC, $GPVTG, $GPXTE, \n   $GPZDA, $IIXDR, $SDDBT, $SDDPT, $SDHDG, $SDMTW, \n   $SDVHW, $SDVLW, $WIMWD, $WIMWV\n   \n   Function: Since the checksum field isn't separated by comma, do that first. (replace '*' by ',@')\n   The switch command is used to control the NMEA sentence forwarding.\n   Since IIXDR has variable length is must be treated separately. Therefore there are two node outputs.\n*/\n\n\"use strict\"\n\nvar Nmea_Id = '';\n\n// The last field is separated by an asterix. Replace it by a comma to let work string.split() properly.\n\nmsg.Satz = msg.payload.replace(\"*\", \",@\");\n\n//msg.Satz = msg.Satz.split(/\\n/);\nmsg.Satz = msg.Satz.split(\",\");\n\nNmea_Id = msg.Satz[0];\n\nmsg.Nmea_Id = Nmea_Id;\n\nswitch (Nmea_Id) {\n    case '$GPAAM': return [msg, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, msg];\n\n    case '$GPAPB': return [null, msg, null, null, null,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, msg];\n\n    case '$GPBOD': return [null, null, msg, null, null,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, msg];\n\n    case '$GPGGA': return [null, null, null, msg, null,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, msg];\n\n    case '$GPGLC': return [null, null, null, null, msg,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, msg];\n\n    case '$GPGLL': return [null, null, null, null, null,\n        msg, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, msg];\n\n    case '$GPGSA': return [null, null, null, null, null,\n        null, msg, null, null, null,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, msg];\n\n    case '$GPGSV': return [null, null, null, null, null,\n        null, null, msg, null, null,\n        null, null, null, null, null,\n        null, null, null, msg];\n\n    case '$GPRMB': return [null, null, null, null, null,\n        null, null, null, msg, null,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, msg];\n\n    case '$GPRMC': return [null, null, null, null, null,\n        null, null, null, null, msg,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, msg];\n\n    case '$GPVTG': return [null, null, null, null, null,\n        null, null, null, null, null,\n        msg, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, msg];\n\n    case '$GPXTE': return [null, null, null, null, null,\n        null, null, null, null, null,\n        null, msg, null, null, null,\n        null, null, null, null, null,\n        null, null, null, msg];\n\n    case '$GPZDA': return [null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, msg, null, null,\n        null, null, null, null, null,\n        null, null, null, msg];\n\n    case '$IIXDR': return [null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, msg, null,\n        null, null, null, null, null,\n        null, null, null, msg];\n\n    case '$SDDBT': return [null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, null, msg,\n        null, null, null, null, null,\n        null, null, null, msg];\n\n    case '$SDDPT': return [null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        msg, null, null, null, null,\n        null, null, null, msg];\n\n    case '$SDHDG': return [null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        null, msg, null, null, null,\n        null, null, null, msg];\n\n    case '$SDMTW': return [null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, msg, null, null,\n        null, null, null];\n\n    case '$SDVHW': return [null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, msg, null,\n        null, null, null, msg];\n\n    case '$SDVLW': return [null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, null, msg,\n        null, null, null, msg];\n\n    case '$WIMWD': return [null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        msg, null, null, msg];\n\n    case '$WIMWV': return [null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        null, msg, null, msg];\n\n    case '$IIVWR': return [null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, null, null, null,\n        null, null, msg, msg];\n\n    case '$IIRPM': return null;\n\n    case '!AIVDO': return null;\n\n    default: return null;\n\n    /*    \n        [ null, null, null, null, null,\n                                null, null, null, null, null,\n                                null, null, null, null, null,\n                                null, null, null, null, null,\n                                null, msg];   \n     */\n\n}\n\n",
        "outputs": 23,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 620,
        "wires": [
            [],
            [
                "1d6fe179d7d51517",
                "be405f421798dd0b",
                "31162f0c307b5528",
                "c94406ca35181667",
                "dd765bd78e66e290",
                "3b7470bfc24d8be5",
                "4aba2262d1ee83f8",
                "c2430897aad39ab3"
            ],
            [],
            [
                "174a06f29746ae1f",
                "30a308f16a986d76",
                "f2a2201fc220b0dd",
                "ae199fada627d7d3",
                "0f7abb7c228b8f05"
            ],
            [],
            [],
            [],
            [],
            [
                "516b41d007819a24",
                "0db043dc78db21e4",
                "c3c0898877eca64a",
                "8c17f9f433883326",
                "f5ece63678551821",
                "7da89b4630f0646d",
                "5e98224b57b46b00",
                "faa2ad1677e5bb9a",
                "a01695689c81e773",
                "da1eca73e35de890"
            ],
            [
                "6f28556412c43de3",
                "3a7022c6116cd1b6",
                "4b91cc93fec0152e",
                "928fbe7cfb3f3513"
            ],
            [
                "552532663808bc60",
                "a162f50c61c19869",
                "234724f9ee9fecfa"
            ],
            [],
            [],
            [
                "5f4e7a7d0e16a8ce"
            ],
            [
                "e275267bba985e25",
                "5d7c0ad9afe7f16f",
                "00aaf6fe649c967c"
            ],
            [
                "f00359fa2e396994"
            ],
            [
                "91c9a8364057d893"
            ],
            [
                "ab6aa4b1816ef021"
            ],
            [
                "36571cdef1af1b91"
            ],
            [
                "1136bf41c2d249b5"
            ],
            [],
            [],
            [
                "9880c1408d5dbf78",
                "bacf5c8b72ffcdeb"
            ]
        ]
    },
    {
        "id": "03c9cbc3a18b37c2",
        "type": "ui_text",
        "z": "a3bd807ce6f6d210",
        "group": "b0652885.6c6d8",
        "order": 0,
        "width": "0",
        "height": "0",
        "name": "LAT",
        "label": "LAT",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1419.999984741211,
        "y": 652.0000610351562,
        "wires": []
    },
    {
        "id": "fd6066a47c73b112",
        "type": "ui_text",
        "z": "a3bd807ce6f6d210",
        "group": "b0652885.6c6d8",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "LON",
        "label": "LON",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1419.999984741211,
        "y": 684.0000610351562,
        "wires": []
    },
    {
        "id": "6f28556412c43de3",
        "type": "function",
        "z": "a3bd807ce6f6d210",
        "name": "convert+format LAT",
        "func": " //convert and format latitude\n \n        var value_in = msg.Satz[3];\n    \n        msg.payload = value_in.substr(0,2) + '°' + ' ' + value_in.substr(2,5) + \"' \" + msg.Satz[4];\n     \n        return [msg];\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 1234.999984741211,
        "y": 652.0000610351562,
        "wires": [
            [
                "03c9cbc3a18b37c2",
                "ad5d6084ac4bb006"
            ]
        ]
    },
    {
        "id": "3a7022c6116cd1b6",
        "type": "function",
        "z": "a3bd807ce6f6d210",
        "name": "convert+format LON",
        "func": "// convert and format longitude\n\n  var value_in = msg.Satz[5];\n        \n  msg.payload = value_in.substr(0,3) + '°' + ' ' + value_in.substr(3,5) + \"' \" + msg.Satz[6];\n  \n  return msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 1245.999984741211,
        "y": 684.0000610351562,
        "wires": [
            [
                "fd6066a47c73b112",
                "77e781babd5c78de"
            ]
        ]
    },
    {
        "id": "4b91cc93fec0152e",
        "type": "function",
        "z": "a3bd807ce6f6d210",
        "name": "convert+format SOG",
        "func": "// convert and format Speed over ground\n\n  var value_in = msg.Satz[7];\n        \n  msg.payload = value_in; // + ' kn';\n  \n  return  msg;\n  \n        ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1245.999984741211,
        "y": 715.0000610351562,
        "wires": [
            [
                "5875db15c5a4f548",
                "e988208c57e03fc6"
            ]
        ]
    },
    {
        "id": "928fbe7cfb3f3513",
        "type": "function",
        "z": "a3bd807ce6f6d210",
        "name": "convert+format COG",
        "func": "// convert and format course over ground\n\n  var value_in = msg.Satz[8];\n        \n  msg.payload = value_in; //+ ' °';\n  \n  return  msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1244.999984741211,
        "y": 747.0000610351562,
        "wires": [
            [
                "2f1dd6abd61e50f0",
                "06a7311a2848e0d1"
            ]
        ]
    },
    {
        "id": "783aa4cd4c4b7205",
        "type": "comment",
        "z": "a3bd807ce6f6d210",
        "name": "$GPRMC",
        "info": "Recommended Minimum Navigation Information",
        "x": 676.9999847412109,
        "y": 631.0000610351562,
        "wires": []
    },
    {
        "id": "91c9a8364057d893",
        "type": "function",
        "z": "a3bd807ce6f6d210",
        "name": "convert+format HDG",
        "func": "/* convert and format heading\n*  Sentence:\n        magnetic sensor heading, degrees\n        magnetic deviation, degrees\n        magnetic deviation direction, E/W\n        magnetic variation, degrees\n        magnetic variation direction, E/W\n*/\n        var Hdg = new Object();\n        \n        Hdg.hdg = msg.Satz[1] + '°';\n        Hdg.dev = msg.Satz[2] + '°' +  msg.Satz[3];\n        Hdg.Decl= msg.Satz[4] + '°' + msg.Satz[5];\n    \n        return [Hdg];\n        ",
        "outputs": 1,
        "noerr": 0,
        "x": 1262.999984741211,
        "y": 1133.0000610351562,
        "wires": [
            [
                "6e59c6a2f728a0e4",
                "ef337398ec3ba347",
                "d938a33353d42051"
            ]
        ]
    },
    {
        "id": "2f1dd6abd61e50f0",
        "type": "ui_gauge",
        "z": "a3bd807ce6f6d210",
        "name": "COG",
        "group": "b0652885.6c6d8",
        "order": 0,
        "width": 0,
        "height": 0,
        "gtype": "compass",
        "title": "Course over Ground",
        "label": "",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": "360",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1419.999984741211,
        "y": 747.0000610351562,
        "wires": []
    },
    {
        "id": "5875db15c5a4f548",
        "type": "ui_gauge",
        "z": "a3bd807ce6f6d210",
        "name": "",
        "group": "b0652885.6c6d8",
        "order": 0,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Speed Over Ground",
        "label": "units",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": "15",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1468.366683959961,
        "y": 715.2500610351562,
        "wires": []
    },
    {
        "id": "6e59c6a2f728a0e4",
        "type": "ui_text",
        "z": "a3bd807ce6f6d210",
        "group": "596dfba5.8c720c",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "MgK",
        "format": "{{msg.hdg}}",
        "layout": "row-spread",
        "x": 1516.999984741211,
        "y": 1132.0000610351562,
        "wires": []
    },
    {
        "id": "ef337398ec3ba347",
        "type": "ui_text",
        "z": "a3bd807ce6f6d210",
        "group": "596dfba5.8c720c",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "MW",
        "format": "{{msg.Decl}}",
        "layout": "row-spread",
        "x": 1516.999984741211,
        "y": 1165.0000610351562,
        "wires": []
    },
    {
        "id": "d938a33353d42051",
        "type": "ui_text",
        "z": "a3bd807ce6f6d210",
        "group": "596dfba5.8c720c",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "ABL",
        "format": "{{msg.dev}}",
        "layout": "row-spread",
        "x": 1517.999984741211,
        "y": 1196.0000610351562,
        "wires": []
    },
    {
        "id": "358cf022f3bd251e",
        "type": "comment",
        "z": "a3bd807ce6f6d210",
        "name": "$SDHDG",
        "info": "Heading - Deviation & Variation",
        "x": 1074.999984741211,
        "y": 1119.0000610351562,
        "wires": []
    },
    {
        "id": "1d6fe179d7d51517",
        "type": "function",
        "z": "a3bd807ce6f6d210",
        "name": "convert+format XTE",
        "func": " //convert and format Cross Track Error\n \n \n        var value_in = msg.Satz[5];\n        \n        if ( value_in == \"N\")\n        {\n            msg.payload = msg.Satz[3] + \" nm\";\n        }\n        else\n        {\n           msg.payload = msg.Satz[3] + \" km\";\n            \n        }\n            \n        \n        return msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 440,
        "y": 60,
        "wires": [
            [
                "6c61efcf984c16bd"
            ]
        ]
    },
    {
        "id": "6c61efcf984c16bd",
        "type": "ui_text",
        "z": "a3bd807ce6f6d210",
        "group": "e9660793.9419",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "XTE",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 617,
        "y": 60.05000305175781,
        "wires": []
    },
    {
        "id": "be405f421798dd0b",
        "type": "function",
        "z": "a3bd807ce6f6d210",
        "name": "Steer",
        "func": " //convert and format \"Steer R or L\"\n \n        msg.payload = msg.Satz[4] ;\n        \n        return msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 390.11669921875,
        "y": 90.94999694824219,
        "wires": [
            [
                "f1b8384a1c7d6880"
            ]
        ]
    },
    {
        "id": "f1b8384a1c7d6880",
        "type": "ui_text",
        "z": "a3bd807ce6f6d210",
        "group": "e9660793.9419",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Steer",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 618.11669921875,
        "y": 90.94999694824219,
        "wires": []
    },
    {
        "id": "31162f0c307b5528",
        "type": "function",
        "z": "a3bd807ce6f6d210",
        "name": "Arrival circle entered",
        "func": " //convert and format \"Arrival circle entered\"\n \n    msg.payload = msg.Satz[6];\n  \n    return msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 440.11669921875,
        "y": 122.94999694824219,
        "wires": [
            [
                "3a4ce653fbaf4ca3"
            ]
        ]
    },
    {
        "id": "3a4ce653fbaf4ca3",
        "type": "ui_text",
        "z": "a3bd807ce6f6d210",
        "group": "e9660793.9419",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Arrival Circle entered",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 670,
        "y": 123.05000305175781,
        "wires": []
    },
    {
        "id": "c94406ca35181667",
        "type": "function",
        "z": "a3bd807ce6f6d210",
        "name": "WP perpendicular",
        "func": " //convert and format \"Perpendicular passed at waypoint \"\n \n    msg.payload = msg.Satz[7];\n  \n    return msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 431.11669921875,
        "y": 155.9499969482422,
        "wires": [
            [
                "0cc5e9f043125ab5"
            ]
        ]
    },
    {
        "id": "0cc5e9f043125ab5",
        "type": "ui_text",
        "z": "a3bd807ce6f6d210",
        "group": "e9660793.9419",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "WP perpendicular",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 659.11669921875,
        "y": 154.9499969482422,
        "wires": []
    },
    {
        "id": "dd765bd78e66e290",
        "type": "function",
        "z": "a3bd807ce6f6d210",
        "name": "Bearing O2D",
        "func": " //convert and format \"Bearing origin to destination\"\n \n \n        var value_in = msg.Satz[9];\n        \n        \n        \n        if ( value_in == \"M\")\n        {\n            msg.payload = msg.Satz[8] + \" mag\";\n        }\n        else\n        {\n           msg.payload = msg.Satz[8] + \" true\";\n            \n        }\n            \n        \n        return msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 410.11669921875,
        "y": 186.9499969482422,
        "wires": [
            [
                "a107f23f3724b5c7"
            ]
        ]
    },
    {
        "id": "a107f23f3724b5c7",
        "type": "ui_text",
        "z": "a3bd807ce6f6d210",
        "group": "e9660793.9419",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Bearing Org to Dest",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 672,
        "y": 187.0500030517578,
        "wires": []
    },
    {
        "id": "3b7470bfc24d8be5",
        "type": "function",
        "z": "a3bd807ce6f6d210",
        "name": "Dest. WP",
        "func": " //convert and format \"Desitiantion way point\"\n \n    msg.payload = msg.Satz[10];\n  \n    return msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 401.11669921875,
        "y": 218.9499969482422,
        "wires": [
            [
                "380640dc6d88b616"
            ]
        ]
    },
    {
        "id": "380640dc6d88b616",
        "type": "ui_text",
        "z": "a3bd807ce6f6d210",
        "group": "e9660793.9419",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Destination Waypoint",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 671.11669921875,
        "y": 216.9499969482422,
        "wires": []
    },
    {
        "id": "4aba2262d1ee83f8",
        "type": "function",
        "z": "a3bd807ce6f6d210",
        "name": "Bearing Pos2D",
        "func": " //convert and format \"Bearing position to destination\"\n \n \n        var value_in = msg.Satz[12];\n        \n        \n        \n        if ( value_in == \"M\")\n        {\n            msg.payload = msg.Satz[11] + \" mag\";\n        }\n        else\n        {\n           msg.payload = msg.Satz[11] + \" true\";\n            \n        }\n            \n        \n        return msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 421.11669921875,
        "y": 250.9499969482422,
        "wires": [
            [
                "d19fe3af54580ed6"
            ]
        ]
    },
    {
        "id": "d19fe3af54580ed6",
        "type": "ui_text",
        "z": "a3bd807ce6f6d210",
        "group": "e9660793.9419",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Bearing Pos to Dest",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 672.11669921875,
        "y": 248.9499969482422,
        "wires": []
    },
    {
        "id": "3d77eea6acdde7ea",
        "type": "comment",
        "z": "a3bd807ce6f6d210",
        "name": "$GPABP",
        "info": "Autopilot Sentence \"B\"",
        "x": 340,
        "y": 340,
        "wires": []
    },
    {
        "id": "c2430897aad39ab3",
        "type": "function",
        "z": "a3bd807ce6f6d210",
        "name": "HDG Pos2D",
        "func": " //convert and format \"Heading position to destination\"\n \n        var value_in = msg.Satz[14];\n        \n        \n        \n        if ( value_in == \"M\")\n        {\n            msg.payload = msg.Satz[13] + \" mag\";\n        }\n        else\n        {\n           msg.payload = msg.Satz[13] + \" true\";\n            \n        }\n            \n        \n        return msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 412.11669921875,
        "y": 283.9499969482422,
        "wires": [
            [
                "05bc4599842a8aef"
            ]
        ]
    },
    {
        "id": "05bc4599842a8aef",
        "type": "ui_text",
        "z": "a3bd807ce6f6d210",
        "group": "e9660793.9419",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Heading Pos to Dest",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 672.11669921875,
        "y": 282.9499969482422,
        "wires": []
    },
    {
        "id": "174a06f29746ae1f",
        "type": "function",
        "z": "a3bd807ce6f6d210",
        "name": "convert+format UTC",
        "func": " //convert and format \"UTC\"\n // Sentence GGA\n \n        var value_in = msg.Satz[1];\n    \n        msg.payload = value_in.substr(0,2) + ':' + value_in.substr(2,2) + \":\" + value_in.substr(4,2);\n     \n        return [msg];\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 1219.999984741211,
        "y": 155.00006103515625,
        "wires": [
            [
                "9e160af311181412",
                "e56082a47516ee36"
            ]
        ]
    },
    {
        "id": "9e160af311181412",
        "type": "ui_text",
        "z": "a3bd807ce6f6d210",
        "group": "604ac05d.2accd8",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "UTC",
        "label": "UTC",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1407.999984741211,
        "y": 155.00006103515625,
        "wires": []
    },
    {
        "id": "30a308f16a986d76",
        "type": "function",
        "z": "a3bd807ce6f6d210",
        "name": "GPS quality",
        "func": "//convert and format \"GPS quality\"\n // Sentence GGA\n \nvar Mesg;\nGPS_Q = msg.Satz[6];\n\nswitch(GPS_Q){\n    case '0': msg.payload = \"fix no available\";\n              break;\n    case '1': msg.payload = \"GPS fix\";\n              break;\n    case '2': msg.payload = \"Differential GPS fix\";\n}\n    return msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1200.999984741211,
        "y": 184.00006103515625,
        "wires": [
            [
                "f24afad1698e0f71",
                "891f0b81d38a1c97"
            ]
        ]
    },
    {
        "id": "f24afad1698e0f71",
        "type": "ui_text",
        "z": "a3bd807ce6f6d210",
        "group": "604ac05d.2accd8",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "GPS quality",
        "label": "GPS quality",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1428.999984741211,
        "y": 185.00006103515625,
        "wires": []
    },
    {
        "id": "f2a2201fc220b0dd",
        "type": "function",
        "z": "a3bd807ce6f6d210",
        "name": "# of sat",
        "func": " //convert and format \"number of satellites\"\n // Sentence GGA\n \n        msg.payload = msg.Satz[7];\n        return [msg];\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 1190.999984741211,
        "y": 216.00006103515625,
        "wires": [
            [
                "d29f5319f88fd729",
                "a5e8b31b6d492e05"
            ]
        ]
    },
    {
        "id": "d29f5319f88fd729",
        "type": "ui_text",
        "z": "a3bd807ce6f6d210",
        "group": "604ac05d.2accd8",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "number of sats",
        "label": "number of sats",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1438.999984741211,
        "y": 216.00006103515625,
        "wires": []
    },
    {
        "id": "6c639ac149ddbc52",
        "type": "comment",
        "z": "a3bd807ce6f6d210",
        "name": "$GPGGA",
        "info": "Global Positioning System Fix Data, \nTime, Position and fix related data \nfor a GPS receiver.",
        "x": 522.9999847412109,
        "y": 447.00006103515625,
        "wires": []
    },
    {
        "id": "ae199fada627d7d3",
        "type": "function",
        "z": "a3bd807ce6f6d210",
        "name": "HDOP",
        "func": "//convert and format \"HDOP\"\n// Horizontal Dilution of precision\n// Sentence GGA\n\n\n msg.payload = msg.Satz[8];\n return [msg];\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 1182.999984741211,
        "y": 247.00006103515625,
        "wires": [
            [
                "2ac474256d0283b8"
            ]
        ]
    },
    {
        "id": "2ac474256d0283b8",
        "type": "ui_text",
        "z": "a3bd807ce6f6d210",
        "group": "604ac05d.2accd8",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "HDOP",
        "label": "HDOP",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1409.999984741211,
        "y": 248.00006103515625,
        "wires": []
    },
    {
        "id": "0f7abb7c228b8f05",
        "type": "function",
        "z": "a3bd807ce6f6d210",
        "name": "Antenna Alt.",
        "func": "//convert and format \"antenna altitude\"\n// Sentence GGA\n// Antenna Altitude above/below mean-sea-level (geoid)\n\n msg.payload = msg.Satz[9];\n return [msg];\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 1203.766616821289,
        "y": 279.1667175292969,
        "wires": [
            [
                "eb098d56fb2597ac"
            ]
        ]
    },
    {
        "id": "eb098d56fb2597ac",
        "type": "ui_text",
        "z": "a3bd807ce6f6d210",
        "group": "604ac05d.2accd8",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Antenna altitude",
        "label": "Antenna altitude",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1439.0832977294922,
        "y": 280.0834045410156,
        "wires": []
    },
    {
        "id": "da1eca73e35de890",
        "type": "function",
        "z": "a3bd807ce6f6d210",
        "name": "convert+format XTE",
        "func": " //convert and format Cross Track Error\n \n \n       \n    msg.payload = msg.Satz[2] + \" nm\";\n    return msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 1235.883285522461,
        "y": 318.8833923339844,
        "wires": [
            [
                "13f83ede1c83838b"
            ]
        ]
    },
    {
        "id": "789d03d50810191e",
        "type": "comment",
        "z": "a3bd807ce6f6d210",
        "name": "$GPRMB",
        "info": "",
        "x": 552.7665863037109,
        "y": 545.0667114257812,
        "wires": []
    },
    {
        "id": "a01695689c81e773",
        "type": "function",
        "z": "a3bd807ce6f6d210",
        "name": "Steer",
        "func": " //convert and format \"Steer R or L\"\n \n        msg.payload = msg.Satz[3] ;\n        \n        return msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 1186.883285522461,
        "y": 350.8833923339844,
        "wires": [
            [
                "5bf5c965677f02b6"
            ]
        ]
    },
    {
        "id": "516b41d007819a24",
        "type": "function",
        "z": "a3bd807ce6f6d210",
        "name": "To WP",
        "func": " //convert and format \"Desitiantion way point\"\n \n    msg.payload = msg.Satz[5];\n  \n    return msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 1187.883285522461,
        "y": 416.88336181640625,
        "wires": [
            [
                "facb592ff1ae617d"
            ]
        ]
    },
    {
        "id": "facb592ff1ae617d",
        "type": "ui_text",
        "z": "a3bd807ce6f6d210",
        "group": "2e992207.609d26",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "To Waypoint",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1431.883285522461,
        "y": 416.88336181640625,
        "wires": []
    },
    {
        "id": "0db043dc78db21e4",
        "type": "function",
        "z": "a3bd807ce6f6d210",
        "name": "From WP",
        "func": " //convert and format \"Desitiantion way point\"\n \n    msg.payload = msg.Satz[4];\n  \n    return msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 1195.883285522461,
        "y": 383.88336181640625,
        "wires": [
            [
                "aa734d8251b4df26"
            ]
        ]
    },
    {
        "id": "aa734d8251b4df26",
        "type": "ui_text",
        "z": "a3bd807ce6f6d210",
        "group": "2e992207.609d26",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "From Waypoint",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1441.883285522461,
        "y": 383.88336181640625,
        "wires": []
    },
    {
        "id": "c3c0898877eca64a",
        "type": "function",
        "z": "a3bd807ce6f6d210",
        "name": "Dest. WP LAT",
        "func": " //convert and format latitude\n \n        var value_in = msg.Satz[6];\n    \n        msg.payload = value_in.substr(0,2) + '°' + ' ' + value_in.substr(2,5) + \"' \" + msg.Satz[7];\n     \n        return [msg];\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 1216.999984741211,
        "y": 449.00006103515625,
        "wires": [
            [
                "ab4cd4d4b6abb1e7"
            ]
        ]
    },
    {
        "id": "ab4cd4d4b6abb1e7",
        "type": "ui_text",
        "z": "a3bd807ce6f6d210",
        "group": "2e992207.609d26",
        "order": 5,
        "width": "0",
        "height": "0",
        "name": "Dest.WP LAT",
        "label": "Dest.WP LAT",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1445.999984741211,
        "y": 449.00006103515625,
        "wires": []
    },
    {
        "id": "8c17f9f433883326",
        "type": "function",
        "z": "a3bd807ce6f6d210",
        "name": "Dest. WP LON",
        "func": "// convert and format longitude\n\n  var value_in = msg.Satz[8];\n        \n  msg.payload = value_in.substr(0,3) + '°' + ' ' + value_in.substr(3,5) + \"' \" + msg.Satz[9];\n  \n  return msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 1219.999984741211,
        "y": 481.00006103515625,
        "wires": [
            [
                "59a1de6f0ba1227c"
            ]
        ]
    },
    {
        "id": "59a1de6f0ba1227c",
        "type": "ui_text",
        "z": "a3bd807ce6f6d210",
        "group": "2e992207.609d26",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "Dest. WP LON",
        "label": "Dest. WP LON",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1443.999984741211,
        "y": 481.00006103515625,
        "wires": []
    },
    {
        "id": "f5ece63678551821",
        "type": "function",
        "z": "a3bd807ce6f6d210",
        "name": "Range to Dest.",
        "func": "// convert and format longitude\n\nmsg.payload = msg.Satz[10] + ' nm' ;\n  \nreturn msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 1220.749984741211,
        "y": 513.7500610351562,
        "wires": [
            [
                "2ab89d3aa67f0812"
            ]
        ]
    },
    {
        "id": "2ab89d3aa67f0812",
        "type": "ui_text",
        "z": "a3bd807ce6f6d210",
        "group": "2e992207.609d26",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "Range to Dest.",
        "label": "Range to Dest.",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1443.749984741211,
        "y": 513.7500610351562,
        "wires": []
    },
    {
        "id": "7da89b4630f0646d",
        "type": "function",
        "z": "a3bd807ce6f6d210",
        "name": "BRG to Dest.",
        "func": " //convert and format latitude\n \n        msg.payload = msg.Satz[11]\n        return msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 1210.999984741211,
        "y": 545.0000610351562,
        "wires": [
            [
                "7a397be65ac09f16"
            ]
        ]
    },
    {
        "id": "7a397be65ac09f16",
        "type": "ui_text",
        "z": "a3bd807ce6f6d210",
        "group": "2e992207.609d26",
        "order": 8,
        "width": "0",
        "height": "0",
        "name": "BRG to Dest.",
        "label": "BRG to Dest.",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1439.999984741211,
        "y": 545.0000610351562,
        "wires": []
    },
    {
        "id": "5e98224b57b46b00",
        "type": "function",
        "z": "a3bd807ce6f6d210",
        "name": "VMG to Dest.",
        "func": " //convert and format latitude\n \n        msg.payload = msg.Satz[12];\n        return msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 1221.999984741211,
        "y": 577.0000610351562,
        "wires": [
            [
                "9ec13a7befcf2a57"
            ]
        ]
    },
    {
        "id": "9ec13a7befcf2a57",
        "type": "ui_text",
        "z": "a3bd807ce6f6d210",
        "group": "2e992207.609d26",
        "order": 9,
        "width": "0",
        "height": "0",
        "name": "VMG to Dest.",
        "label": "VMG to Dest.",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1450.999984741211,
        "y": 577.0000610351562,
        "wires": []
    },
    {
        "id": "faa2ad1677e5bb9a",
        "type": "function",
        "z": "a3bd807ce6f6d210",
        "name": "Arrival Status",
        "func": " //convert and format latitude\n \n        msg.payload = msg.Satz[13];\n        return msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 1222.999984741211,
        "y": 609.0000610351562,
        "wires": [
            [
                "856dedb4d04c6330"
            ]
        ]
    },
    {
        "id": "856dedb4d04c6330",
        "type": "ui_text",
        "z": "a3bd807ce6f6d210",
        "group": "2e992207.609d26",
        "order": 10,
        "width": "0",
        "height": "0",
        "name": "Arrival Status",
        "label": "Arrival Status",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1451.999984741211,
        "y": 609.0000610351562,
        "wires": []
    },
    {
        "id": "552532663808bc60",
        "type": "function",
        "z": "a3bd807ce6f6d210",
        "name": "Track Degrees true",
        "func": " //convert and format latitude\n \n        msg.payload = msg.Satz[1];\n        return msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 1234.749984741211,
        "y": 782.7500610351562,
        "wires": [
            [
                "ee02461aa6b1ddb7"
            ]
        ]
    },
    {
        "id": "ee02461aa6b1ddb7",
        "type": "ui_text",
        "z": "a3bd807ce6f6d210",
        "group": "2e992207.609d26",
        "order": 11,
        "width": "0",
        "height": "0",
        "name": "Track Degrees true",
        "label": "Track Degrees (true)",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1445.749984741211,
        "y": 782.7500610351562,
        "wires": []
    },
    {
        "id": "80b88ea42e0b5ae3",
        "type": "comment",
        "z": "a3bd807ce6f6d210",
        "name": "$GPVTG",
        "info": "Track made good and ground speed",
        "x": 742.7665863037109,
        "y": 719.8667602539062,
        "wires": []
    },
    {
        "id": "a162f50c61c19869",
        "type": "function",
        "z": "a3bd807ce6f6d210",
        "name": "Track Degrees mag",
        "func": " //convert and format latitude\n \n        msg.payload = msg.Satz[3];\n        return msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 1243.883285522461,
        "y": 815.8833312988281,
        "wires": [
            [
                "b0843bdf27503e7f"
            ]
        ]
    },
    {
        "id": "b0843bdf27503e7f",
        "type": "ui_text",
        "z": "a3bd807ce6f6d210",
        "group": "2e992207.609d26",
        "order": 12,
        "width": "0",
        "height": "0",
        "name": "Track Degrees (mag)",
        "label": "Track Degrees (mag)",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1459.883285522461,
        "y": 816.8833618164062,
        "wires": []
    },
    {
        "id": "234724f9ee9fecfa",
        "type": "function",
        "z": "a3bd807ce6f6d210",
        "name": "SOG (kn)",
        "func": " //convert and format latitude\n \n        msg.payload = msg.Satz[5] + \" kn\";\n        return msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 1203.883285522461,
        "y": 848.4833374023438,
        "wires": [
            [
                "acedcbe51fb85fc8"
            ]
        ]
    },
    {
        "id": "acedcbe51fb85fc8",
        "type": "ui_text",
        "z": "a3bd807ce6f6d210",
        "group": "2e992207.609d26",
        "order": 14,
        "width": "0",
        "height": "0",
        "name": "SOG (kn)",
        "label": "SOG (kn)",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1419.883285522461,
        "y": 849.4833679199219,
        "wires": []
    },
    {
        "id": "5f4e7a7d0e16a8ce",
        "type": "function",
        "z": "a3bd807ce6f6d210",
        "name": "TransducerData",
        "func": "\"use strict\"\n\nvar NumEntries,i,j;\n\nvar TDValues = [];\n\nNumEntries = (msg.Satz.length - 2)/4;\n\nTDValues[0] = [msg.Satz[8],  msg.Satz[5],  msg.Satz[6],  msg.Satz[7]];\nTDValues[1] = [msg.Satz[4],  msg.Satz[1],  msg.Satz[2],  msg.Satz[3]];\nTDValues[2] = [msg.Satz[16], msg.Satz[13], msg.Satz[14], msg.Satz[15]];\nTDValues[3] = [msg.Satz[20], msg.Satz[17], msg.Satz[18], msg.Satz[19]];\nTDValues[4] = [msg.Satz[12], msg.Satz[9],  msg.Satz[10], msg.Satz[11]];\n\n\n/*\nfor ( i = 1; i <= NumEntries; i++)\n{\n    j = (i-1)*4+1;\n    TDValues[i] = [msg.Satz[j+3],msg.Satz[j+0],msg.Satz[j+1],msg.Satz[j+2]];\n}\n*/\n\nmsg.payload = TDValues;\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1225.766586303711,
        "y": 927.3334045410156,
        "wires": [
            [
                "6ecd432b50467807"
            ]
        ]
    },
    {
        "id": "76631ade6a9eea01",
        "type": "tcp in",
        "z": "a3bd807ce6f6d210",
        "name": "Get NMEA from SignalK",
        "server": "client",
        "host": "192.168.3.21",
        "port": "10110",
        "datamode": "stream",
        "datatype": "utf8",
        "newline": "\\n",
        "topic": "",
        "trim": false,
        "base64": false,
        "tls": "",
        "x": 148.88331604003906,
        "y": 375.8833923339844,
        "wires": [
            [
                "33634a0f65e06421"
            ]
        ]
    },
    {
        "id": "6ecd432b50467807",
        "type": "ui_template",
        "z": "a3bd807ce6f6d210",
        "group": "40a6636b.25d694",
        "name": "Transducer Data",
        "order": 1,
        "width": "6",
        "height": "6",
        "format": "<table id=\"table\" border=\"1\">\n <tr>\n <th>Name</th> \n <th>Type</th>\n <th>Data</th>\n <th>Unit</th>\n </tr>\n <tbody>\n <tr ng-repeat=\"row in msg.payload\">\n <td ng-repeat=\"item in row\" >{{item}}</td>\n </tr>\n </tbody>\n</table>\n\n",
        "storeOutMessages": false,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 1448.999984741211,
        "y": 926.0000305175781,
        "wires": [
            []
        ]
    },
    {
        "id": "7e6507abc99ede84",
        "type": "comment",
        "z": "a3bd807ce6f6d210",
        "name": "$IIXDR",
        "info": "",
        "x": 1017.7665863037109,
        "y": 881.0667114257812,
        "wires": []
    },
    {
        "id": "e275267bba985e25",
        "type": "function",
        "z": "a3bd807ce6f6d210",
        "name": "depth b. transd. (feet)",
        "func": "// $SDDBT\n// convert and format depth\n\nmsg.payload = msg.Satz[1]; // + ' f';\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1245.800033569336,
        "y": 963.2833862304688,
        "wires": [
            [
                "137609cbb383cd8a",
                "4151f37f076cffad"
            ]
        ]
    },
    {
        "id": "137609cbb383cd8a",
        "type": "ui_text",
        "z": "a3bd807ce6f6d210",
        "group": "f0a8cf1.e62c73",
        "order": 10,
        "width": "0",
        "height": "0",
        "name": "Depth (feet)",
        "label": "Depth (feet)",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1454.8000946044922,
        "y": 963.2834167480469,
        "wires": []
    },
    {
        "id": "5d7c0ad9afe7f16f",
        "type": "function",
        "z": "a3bd807ce6f6d210",
        "name": "depth b. transd. (meter)",
        "func": " // $SDDBT\n // convert and format depth\n \n        msg.payload = msg.Satz[3] + 'm ';\n        return msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 1246.800033569336,
        "y": 995.2833862304688,
        "wires": [
            [
                "9838db15cd4e8204"
            ]
        ]
    },
    {
        "id": "9838db15cd4e8204",
        "type": "ui_text",
        "z": "a3bd807ce6f6d210",
        "group": "f0a8cf1.e62c73",
        "order": 10,
        "width": "0",
        "height": "0",
        "name": "Depth (meter)",
        "label": "Depth (meter)",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1455.8000946044922,
        "y": 995.2834167480469,
        "wires": []
    },
    {
        "id": "00aaf6fe649c967c",
        "type": "function",
        "z": "a3bd807ce6f6d210",
        "name": "depth b. transd. (fathoms)",
        "func": " // $SDDBT\n // convert and format depth\n \n        msg.payload = msg.Satz[5] + 'fth';\n        return msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "x": 1256.800033569336,
        "y": 1026.2833862304688,
        "wires": [
            [
                "6912caa625c859b2"
            ]
        ]
    },
    {
        "id": "6912caa625c859b2",
        "type": "ui_text",
        "z": "a3bd807ce6f6d210",
        "group": "f0a8cf1.e62c73",
        "order": 10,
        "width": "0",
        "height": "0",
        "name": "Depth (fathoms)",
        "label": "Depth (fathoms)",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1465.8000946044922,
        "y": 1026.2833862304688,
        "wires": []
    },
    {
        "id": "6dd9b1c06ea6f19c",
        "type": "comment",
        "z": "a3bd807ce6f6d210",
        "name": "$SDDBT",
        "info": "",
        "x": 986.3666839599609,
        "y": 945.0000610351562,
        "wires": []
    },
    {
        "id": "f00359fa2e396994",
        "type": "function",
        "z": "a3bd807ce6f6d210",
        "name": "Depth of Water",
        "func": "// $SDDPT\n// convert and format depth\n// \n\nmsg.payload = msg.Satz[2] + ' ' + msg.Satz[1] + \"m\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1242.749984741211,
        "y": 1093.7500610351562,
        "wires": [
            [
                "743d6b13f8ac0c5c"
            ]
        ]
    },
    {
        "id": "743d6b13f8ac0c5c",
        "type": "ui_text",
        "z": "a3bd807ce6f6d210",
        "group": "f0a8cf1.e62c73",
        "order": 10,
        "width": "0",
        "height": "0",
        "name": "Depth of Water",
        "label": "Depth of Water",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1545.749984741211,
        "y": 1093.7500610351562,
        "wires": []
    },
    {
        "id": "d96e73e512f4ea08",
        "type": "comment",
        "z": "a3bd807ce6f6d210",
        "name": "$SDDPT",
        "info": "",
        "x": 1010.7499847412109,
        "y": 1034.7500610351562,
        "wires": []
    },
    {
        "id": "36571cdef1af1b91",
        "type": "function",
        "z": "a3bd807ce6f6d210",
        "name": "convert+format VHW",
        "func": "/* convert and format VHW velocity, heading through water\n*  Sentence:\n        Degrees True\n        'T'\n        Degrees Magnetic\n        'M'\n        knots, speed relative to the water\n        'K'\n        kilometers, speed relative to water\n        'K'\n*/\n  \n        var Vhw = new Object();\n        \n        Vhw.tHdg = msg.Satz[1] + '°' + msg.Satz[2];\n        Vhw.mHdg = msg.Satz[3] + '°' +  msg.Satz[4];\n        Vhw.knSpd= msg.Satz[5] + '°' + 'kn';\n        Vhw.kmSpd= msg.Satz[7] + '°' +  'km';\n    \n        return [Vhw];\n        ",
        "outputs": 1,
        "noerr": 0,
        "x": 1264.749984741211,
        "y": 1278.7500610351562,
        "wires": [
            [
                "6a450c7120f4dcf5",
                "7aa01c5fa856242e",
                "44dd5a01dc32101c",
                "6d7e73e844daea51"
            ]
        ]
    },
    {
        "id": "6a450c7120f4dcf5",
        "type": "ui_text",
        "z": "a3bd807ce6f6d210",
        "group": "596dfba5.8c720c",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "HDG (true)",
        "label": "HDG (true)",
        "format": "{{msg.tHdg}}",
        "layout": "row-spread",
        "x": 1535.749984741211,
        "y": 1275.7500610351562,
        "wires": []
    },
    {
        "id": "7aa01c5fa856242e",
        "type": "ui_text",
        "z": "a3bd807ce6f6d210",
        "group": "596dfba5.8c720c",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "HDG (mag)",
        "label": "HDG (mag)",
        "format": "{{msg.mHdg}}",
        "layout": "row-spread",
        "x": 1535.749984741211,
        "y": 1308.7500610351562,
        "wires": []
    },
    {
        "id": "44dd5a01dc32101c",
        "type": "ui_text",
        "z": "a3bd807ce6f6d210",
        "group": "596dfba5.8c720c",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "Speed trough Water (kn)",
        "label": "Speed trough Water (kn)",
        "format": "{{msg.knSpd}}",
        "layout": "row-spread",
        "x": 1576.749984741211,
        "y": 1339.7500610351562,
        "wires": []
    },
    {
        "id": "ab6aa4b1816ef021",
        "type": "function",
        "z": "a3bd807ce6f6d210",
        "name": "Water temp.",
        "func": "/*\nUnclear why some sentences other than \"MTW\"\nare in this channel. Kill them.\n*/\n\nif ( msg.Satz[0] !== '$SDMTW')\n    msg = null;\nelse \n    msg.payload = msg.Satz[1] + '°' + msg.Satz[2];\n        \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1234.999984741211,
        "y": 1231.0000610351562,
        "wires": [
            [
                "a1e10d9527bea8c4"
            ]
        ]
    },
    {
        "id": "a1e10d9527bea8c4",
        "type": "ui_text",
        "z": "a3bd807ce6f6d210",
        "group": "f0a8cf1.e62c73",
        "order": 10,
        "width": "0",
        "height": "0",
        "name": "Water temp.",
        "label": "Water temp.",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1538.066635131836,
        "y": 1236.6834106445312,
        "wires": []
    },
    {
        "id": "6d7e73e844daea51",
        "type": "ui_text",
        "z": "a3bd807ce6f6d210",
        "group": "596dfba5.8c720c",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "Speed trough Water (km)",
        "label": "Speed trough Water (km)",
        "format": "{{msg.kmSpd}}",
        "layout": "row-spread",
        "x": 1577.883285522461,
        "y": 1372.8833618164062,
        "wires": []
    },
    {
        "id": "1136bf41c2d249b5",
        "type": "function",
        "z": "a3bd807ce6f6d210",
        "name": "Dist.travelled tr. water",
        "func": "/* $SDVLW\n   Distance Traveled through Water\n\nDisclaimer: VLW is not conistently documented.\nMost docs describe only two values \n - \"Total cumulative distance\"\n - \"distance since Reset\" \n plus units each.\n I found this:\n \n$--VLW,x.x,N,x.x,N,x.x,N,x.x,N*hh<CR><LF>\n    $--: Talker identifier*\n    VLW: Sentence formatter*\n    x.x,N: Total cumulative water distance, nautical miles*\n    x.x,N: Water distance since reset, nautical miles*\n    x.x,N: Total cumulative ground distance, nautical miles*\n    x.x,N: Ground distance since reset, nautical miles*\n    *hh: Checksum*\n\n */\n\n        var Vlw = {}; \n     \n        Vlw.ToWD = msg.Satz[1] + ' nm';\n        Vlw.TrWD = msg.Satz[3] + ' nm';\n        Vlw.ToGD = msg.Satz[5] + ' nm';\n        Vlw.TrGD = msg.Satz[7] + ' nm';\n    \n        return [Vlw];\n        \n ",
        "outputs": 1,
        "noerr": 0,
        "x": 1263.883285522461,
        "y": 1417.4835205078125,
        "wires": [
            [
                "ce3abb198534cc79",
                "98959ea77055c620",
                "fa0233dfd86789f7",
                "261ed23f64b4f627"
            ]
        ]
    },
    {
        "id": "ce3abb198534cc79",
        "type": "ui_text",
        "z": "a3bd807ce6f6d210",
        "group": "1bfc320.838e14e",
        "order": 3,
        "width": "0",
        "height": "0",
        "name": "Total water dist.",
        "label": "Total water dist.",
        "format": "{{msg.ToWD}}",
        "layout": "row-spread",
        "x": 1563.883285522461,
        "y": 1421.4835205078125,
        "wires": []
    },
    {
        "id": "261ed23f64b4f627",
        "type": "ui_text",
        "z": "a3bd807ce6f6d210",
        "group": "1bfc320.838e14e",
        "order": 2,
        "width": "0",
        "height": "0",
        "name": "Trip ground Dist.",
        "label": "Trip ground Dist.",
        "format": "{{msg.TrGD}}",
        "layout": "row-spread",
        "x": 1578.5333099365234,
        "y": 1517.083251953125,
        "wires": []
    },
    {
        "id": "fa0233dfd86789f7",
        "type": "ui_text",
        "z": "a3bd807ce6f6d210",
        "group": "1bfc320.838e14e",
        "order": 4,
        "width": "0",
        "height": "0",
        "name": "Total Ground Dist.",
        "label": "Total Ground Dist.",
        "format": "{{msg.ToGD}}",
        "layout": "row-spread",
        "x": 1576.5333099365234,
        "y": 1484.083251953125,
        "wires": []
    },
    {
        "id": "98959ea77055c620",
        "type": "ui_text",
        "z": "a3bd807ce6f6d210",
        "group": "1bfc320.838e14e",
        "order": 1,
        "width": "0",
        "height": "0",
        "name": "Trip water dist.",
        "label": "Trip water dist.",
        "format": "{{msg.TrWD}}",
        "layout": "row-spread",
        "x": 1566.5333099365234,
        "y": 1452.0833129882812,
        "wires": []
    },
    {
        "id": "13f83ede1c83838b",
        "type": "ui_text",
        "z": "a3bd807ce6f6d210",
        "group": "7db9a1f8.c9b498",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "XTE",
        "label": "XTE",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1411.749984741211,
        "y": 317.75006103515625,
        "wires": []
    },
    {
        "id": "5bf5c965677f02b6",
        "type": "ui_text",
        "z": "a3bd807ce6f6d210",
        "group": "7db9a1f8.c9b498",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Steer",
        "label": "Steer",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1413.749984741211,
        "y": 351.75006103515625,
        "wires": []
    },
    {
        "id": "e988208c57e03fc6",
        "type": "ha-sensor",
        "z": "a3bd807ce6f6d210",
        "name": "SOG",
        "entityConfig": "36538c2b4ee8c5bc",
        "version": 0,
        "state": "payload",
        "stateType": "msg",
        "attributes": [],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 1730,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "06a7311a2848e0d1",
        "type": "ha-sensor",
        "z": "a3bd807ce6f6d210",
        "name": "COG",
        "entityConfig": "c4760c4026b9fbb6",
        "version": 0,
        "state": "payload",
        "stateType": "msg",
        "attributes": [],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 1730,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "ad5d6084ac4bb006",
        "type": "ha-sensor",
        "z": "a3bd807ce6f6d210",
        "name": "LAT",
        "entityConfig": "172c54578c852f2d",
        "version": 0,
        "state": "payload",
        "stateType": "msg",
        "attributes": [],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 1650,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "77e781babd5c78de",
        "type": "ha-sensor",
        "z": "a3bd807ce6f6d210",
        "name": "LON",
        "entityConfig": "2482184f4ad2eb67",
        "version": 0,
        "state": "payload",
        "stateType": "msg",
        "attributes": [],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 1650,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "4151f37f076cffad",
        "type": "ha-sensor",
        "z": "a3bd807ce6f6d210",
        "name": "Depth",
        "entityConfig": "116cf96ee16cb2e3",
        "version": 0,
        "state": "payload",
        "stateType": "msg",
        "attributes": [],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 1650,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "696b278af340bdd8",
        "type": "debug",
        "z": "a3bd807ce6f6d210",
        "name": "debug1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 1340,
        "wires": []
    },
    {
        "id": "e56082a47516ee36",
        "type": "ha-sensor",
        "z": "a3bd807ce6f6d210",
        "name": "GPSTime",
        "entityConfig": "95237685892bad5f",
        "version": 0,
        "state": "payload",
        "stateType": "msg",
        "attributes": [],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 1750,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "891f0b81d38a1c97",
        "type": "ha-sensor",
        "z": "a3bd807ce6f6d210",
        "name": "GPSQuality",
        "entityConfig": "f7e733d2f1e66d00",
        "version": 0,
        "state": "payload",
        "stateType": "msg",
        "attributes": [],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 1750,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "a5e8b31b6d492e05",
        "type": "ha-sensor",
        "z": "a3bd807ce6f6d210",
        "name": "GPSSatellites",
        "entityConfig": "7d1bd98111c9f44c",
        "version": 0,
        "state": "payload",
        "stateType": "msg",
        "attributes": [],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 1760,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "9880c1408d5dbf78",
        "type": "function",
        "z": "a3bd807ce6f6d210",
        "name": "AWS",
        "func": "// $IIVWR\n\n\nmsg.payload = msg.Satz[3];\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 1640,
        "wires": [
            [
                "3175789869ae8676",
                "5df3ae248dbbb71a"
            ]
        ]
    },
    {
        "id": "3175789869ae8676",
        "type": "ui_text",
        "z": "a3bd807ce6f6d210",
        "group": "40a6636b.25d694",
        "order": 10,
        "width": "0",
        "height": "0",
        "name": "AWS",
        "label": "AWS",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1469.0000610351562,
        "y": 1640.0000305175781,
        "wires": []
    },
    {
        "id": "5df3ae248dbbb71a",
        "type": "ha-sensor",
        "z": "a3bd807ce6f6d210",
        "name": "AWS",
        "entityConfig": "97b112372f52f973",
        "version": 0,
        "state": "payload",
        "stateType": "msg",
        "attributes": [],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 1670,
        "y": 1640,
        "wires": [
            []
        ]
    },
    {
        "id": "f8583f80e394e1b0",
        "type": "comment",
        "z": "a3bd807ce6f6d210",
        "name": "$IIVWR",
        "info": "Wind Speed and Direction",
        "x": 830,
        "y": 1300,
        "wires": []
    },
    {
        "id": "bacf5c8b72ffcdeb",
        "type": "function",
        "z": "a3bd807ce6f6d210",
        "name": "AWA",
        "func": "// $IIVWR\n// Output delivered as 0-360 to work with 'compass card' in HA\n\n//msg.payload = msg.Satz[1] + msg.Satz[2];\n\nif (msg.Satz[2] === 'L') {\n    msg.payload = 360 - msg.Satz[1];\n} else {\n    msg.payload = msg.Satz[1];\n} \nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 1580,
        "wires": [
            [
                "a853c85b0e99fd4c",
                "436e0869602d39ff"
            ]
        ]
    },
    {
        "id": "a853c85b0e99fd4c",
        "type": "ui_text",
        "z": "a3bd807ce6f6d210",
        "group": "40a6636b.25d694",
        "order": 10,
        "width": "0",
        "height": "0",
        "name": "AWA",
        "label": "Apparent Wind Angle",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1469.0000610351562,
        "y": 1580.0000305175781,
        "wires": []
    },
    {
        "id": "436e0869602d39ff",
        "type": "ha-sensor",
        "z": "a3bd807ce6f6d210",
        "name": "AWA",
        "entityConfig": "6eae8aaf035d4363",
        "version": 0,
        "state": "payload",
        "stateType": "msg",
        "attributes": [],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 1670,
        "y": 1580,
        "wires": [
            []
        ]
    }
]
